/* eslint-disable @next/next/no-img-element */
'use client';
import StringUtil from '@/utils/string.util';
import { FilterMatchMode, FilterOperator } from 'primereact/api';
import { Button } from 'primereact/button';
import { Column } from 'primereact/column';
import { DataTable, DataTableFilterEvent, DataTableFilterMeta, DataTablePageEvent, DataTableSortEvent, SortOrder } from 'primereact/datatable';
import React, { useEffect, useRef, useState } from 'react';
import { IDataservice, getAuthToken } from '../crud/base.crud.api';


interface LazyTableState {
    first?: number;
    rows?: number;
    page?: number;
    sortField?: string | undefined;
    sortOrder?: SortOrder;
    filters?: DataTableFilterMeta;
}

export interface ColumnProp {
    field:string,
    hide:boolean,
    header:string,
    body?:React.ReactNode,
    headerStyle?:string,
    style?:string,
}

export interface MyDataTableProps { //<OneDto extends BaseOneDto> {
    // oneDto: Type<OneDto>;
    title: string;
    dataService: IDataservice;
    columns?: ColumnProp[];
}

export default function MyDataTable(props: MyDataTableProps) {
    const {title, dataService, columns} = props;

    let autoGeneratedColumns: ColumnProp[] = [];

    const dt = useRef<DataTable<any>>(null);
    
    let _defaultFilters: DataTableFilterMeta = {
        id: {
            operator:FilterOperator.AND,
            constraints:[{matchMode: FilterMatchMode.EQUALS, value: null}]
        },
    };
      
    const clearFilters = () => {
        setlazyState({...lazyState, filters:_defaultFilters});
    };

    const onFilterSortPage = (event: DataTableFilterEvent | DataTableSortEvent | DataTablePageEvent) => {
        event.first = 0;
        setlazyState({...lazyState ,...event});
    };

    const setGeneratedColumnsUsingSampleData =  () => {
        let cols: ColumnProp[] = [];
        let filterMap: DataTableFilterMeta = {};
        // if(!itemsResponse.data || !itemsResponse.data.data || !itemsResponse.data.data[0])
            // return;
        const {sampleDataForList} = dataService.getSampleDataForList(window.localStorage.getItem('token'));
        if(!!sampleDataForList){
            const keys = Object.keys(sampleDataForList);// get keys from DTO fields ?
            keys.map((key, i) => {
                cols.push({
                    header:StringUtil.camelToFlat(key),
                    field:key,
                    hide:false,
                });
                filterMap[key] = {
                    operator:FilterOperator.AND,
                    constraints:[
                        {matchMode: FilterMatchMode.CONTAINS, value: null}
                    ]
                };
            });
        }
        autoGeneratedColumns = cols;
        _defaultFilters = filterMap;
    };
    setGeneratedColumnsUsingSampleData();

    const [lazyState, setlazyState] = useState<LazyTableState>({
        first: 0,
        rows: 20,
        page: 1,
        sortField: undefined,
        sortOrder: null,
        filters: _defaultFilters
    });
    const itemsResponse = dataService.useItems(lazyState);

    const finalColumns:ColumnProp[] = autoGeneratedColumns.map(o => {
        const foundCols = columns?.filter(it => it.field==o.field);
        if(!!foundCols?.length) return {...o, ...foundCols[0]}
        else return {...o}
    });

    const dataTableHeader = (
        <div className="flex flex-column md:flex-row md:justify-content-between md:align-items-center">
            <h5 className="m-0">{title}</h5>
            <span className="block mt-2 md:mt-0 p-input-icon-left">
                <Button type="button" 
                        icon="pi pi-filter-slash" 
                        label="Clear" 
                        outlined 
                        onClick={clearFilters} />
            </span>
        </div>
    );

    return (
        <DataTable
            header={dataTableHeader}
            ref={dt}
            value={itemsResponse.data?itemsResponse.data.data:[]}
            dataKey="id"
            lazy
            paginator
            totalRecords={itemsResponse.data?itemsResponse.data.count:0}
            first={lazyState.first}
            rows={20}
            // rowsPerPageOptions={[10, 25, 50]}
            onPage={onFilterSortPage}
            className="datatable-responsive"
            paginatorTemplate="FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown"
            currentPageReportTemplate="{first} to {last} of {totalRecords} records"
            emptyMessage="No data found."
            responsiveLayout="scroll"
            scrollable 
            scrollHeight="600px"
            stripedRows 
            removableSort
            sortField={lazyState.sortField} 
            sortOrder={lazyState.sortOrder}
            onSort={onFilterSortPage}
            filterDisplay="menu"
            filters={lazyState.filters}
            onFilter={onFilterSortPage}
            columnResizeMode="expand" 
            resizableColumns 
            reorderableColumns
            showGridlines
            loading={itemsResponse.isLoading}
        >
            {(finalColumns).map((itm, i) => (
                (!itm.hide &&
                    <Column 
                        key={itm.field}
                        field={itm.field}
                        header={itm.header}
                        hidden={itm.hide}
                        // body={itm.body} 
                        sortable
                        filter
                        filterPlaceholder='Search...'
                        />)
            ))}
        </DataTable>
    );
}
