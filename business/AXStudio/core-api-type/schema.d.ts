/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/business-book/api/about/find": {
    post: operations["AboutController_findAll"];
  };
  [path: `/business-book/api/about/${number}`]: {
    get: operations["AboutController_findById"];
    delete: operations["AboutController_delete"];
  };
  "/business-book/api/about": {
    put: operations["AboutController_update"];
    post: operations["AboutController_create"];
  };
  [path: `/business-book/api/about/many/${string}`]: {
    delete: operations["AboutController_deleteMany"];
  };
  "/business-book/api/audience/test": {
    get: operations["AudienceController_test"];
  };
  "/business-book/api/audience/find": {
    post: operations["AudienceController_findAll"];
  };
  [path: `/business-book/api/audience/${number}`]: {
    get: operations["AudienceController_findById"];
    delete: operations["AudienceController_delete"];
  };
  "/business-book/api/audience": {
    put: operations["AudienceController_update"];
    post: operations["AudienceController_create"];
  };
  [path: `/business-book/api/audience/many/${string}`]: {
    delete: operations["AudienceController_deleteMany"];
  };
  "/business-book/api/auth/login": {
    post: operations["AuthController_login"];
  };
  "/business-book/api/business/test": {
    get: operations["BusinessController_test"];
  };
  "/business-book/api/business/find": {
    post: operations["BusinessController_findAll"];
  };
  [path: `/business-book/api/business/${number}`]: {
    get: operations["BusinessController_findById"];
    delete: operations["BusinessController_delete"];
  };
  "/business-book/api/business": {
    put: operations["BusinessController_update"];
    post: operations["BusinessController_create"];
  };
  [path: `/business-book/api/business/many/${string}`]: {
    delete: operations["BusinessController_deleteMany"];
  };
  "/business-book/api/competitor/test": {
    get: operations["CompetitorController_test"];
  };
  "/business-book/api/competitor/find": {
    post: operations["CompetitorController_findAll"];
  };
  [path: `/business-book/api/competitor/${number}`]: {
    get: operations["CompetitorController_findById"];
    delete: operations["CompetitorController_delete"];
  };
  "/business-book/api/competitor": {
    put: operations["CompetitorController_update"];
    post: operations["CompetitorController_create"];
  };
  [path: `/business-book/api/competitor/many/${string}`]: {
    delete: operations["CompetitorController_deleteMany"];
  };
  "/business-book/api/content-other/test": {
    get: operations["OtherContentController_test"];
  };
  "/business-book/api/content-other/find": {
    post: operations["OtherContentController_findAll"];
  };
  [path: `/business-book/api/content-other/${number}`]: {
    get: operations["OtherContentController_findById"];
    delete: operations["OtherContentController_delete"];
  };
  "/business-book/api/content-other": {
    put: operations["OtherContentController_update"];
    post: operations["OtherContentController_create"];
  };
  [path: `/business-book/api/content-other/many/${string}`]: {
    delete: operations["OtherContentController_deleteMany"];
  };
  "/business-book/api/content-category/test": {
    get: operations["ContentCategoryController_test"];
  };
  "/business-book/api/content-category/find": {
    post: operations["ContentCategoryController_findAll"];
  };
  [path: `/business-book/api/content-category/${number}`]: {
    get: operations["ContentCategoryController_findById"];
    delete: operations["ContentCategoryController_delete"];
  };
  "/business-book/api/content-category": {
    put: operations["ContentCategoryController_update"];
    post: operations["ContentCategoryController_create"];
  };
  [path: `/business-book/api/content-category/many/${string}`]: {
    delete: operations["ContentCategoryController_deleteMany"];
  };
  "/business-book/api/customer/test": {
    get: operations["CustomerController_test"];
  };
  "/business-book/api/customer/find": {
    post: operations["CustomerController_findAll"];
  };
  [path: `/business-book/api/customer/${number}`]: {
    get: operations["CustomerController_findById"];
    delete: operations["CustomerController_delete"];
  };
  "/business-book/api/customer": {
    put: operations["CustomerController_update"];
    post: operations["CustomerController_create"];
  };
  [path: `/business-book/api/customer/many/${string}`]: {
    delete: operations["CustomerController_deleteMany"];
  };
  "/business-book/api/keyword/test": {
    get: operations["KeywordController_test"];
  };
  "/business-book/api/keyword/find": {
    post: operations["KeywordController_findAll"];
  };
  [path: `/business-book/api/keyword/${number}`]: {
    get: operations["KeywordController_findById"];
    delete: operations["KeywordController_delete"];
  };
  "/business-book/api/keyword": {
    put: operations["KeywordController_update"];
    post: operations["KeywordController_create"];
  };
  [path: `/business-book/api/keyword/many/${string}`]: {
    delete: operations["KeywordController_deleteMany"];
  };
  "/business-book/api/lead/test": {
    get: operations["LeadController_test"];
  };
  "/business-book/api/lead/find": {
    post: operations["LeadController_findAll"];
  };
  [path: `/business-book/api/lead/${number}`]: {
    get: operations["LeadController_findById"];
    delete: operations["LeadController_delete"];
  };
  "/business-book/api/lead": {
    put: operations["LeadController_update"];
    post: operations["LeadController_create"];
  };
  [path: `/business-book/api/lead/many/${string}`]: {
    delete: operations["LeadController_deleteMany"];
  };
  "/business-book/api/media/test": {
    get: operations["MediaController_test"];
  };
  "/business-book/api/media/find": {
    post: operations["MediaController_findAll"];
  };
  [path: `/business-book/api/media/${number}`]: {
    get: operations["MediaController_findById"];
    delete: operations["MediaController_delete"];
  };
  "/business-book/api/media": {
    put: operations["MediaController_update"];
    post: operations["MediaController_create"];
  };
  [path: `/business-book/api/media/many/${string}`]: {
    delete: operations["MediaController_deleteMany"];
  };
  "/business-book/api/news/test": {
    get: operations["NewsController_test"];
  };
  "/business-book/api/news/find": {
    post: operations["NewsController_findAll"];
  };
  [path: `/business-book/api/news/${number}`]: {
    get: operations["NewsController_findById"];
    delete: operations["NewsController_delete"];
  };
  "/business-book/api/news": {
    put: operations["NewsController_update"];
    post: operations["NewsController_create"];
  };
  [path: `/business-book/api/news/many/${string}`]: {
    delete: operations["NewsController_deleteMany"];
  };
  "/business-book/api/party-product-class/test": {
    get: operations["PartyProductClassController_test"];
  };
  "/business-book/api/party-product-class/find": {
    post: operations["PartyProductClassController_findAll"];
  };
  [path: `/business-book/api/party-product-class/${number}`]: {
    get: operations["PartyProductClassController_findById"];
    delete: operations["PartyProductClassController_delete"];
  };
  "/business-book/api/party-product-class": {
    put: operations["PartyProductClassController_update"];
    post: operations["PartyProductClassController_create"];
  };
  [path: `/business-book/api/party-product-class/many/${string}`]: {
    delete: operations["PartyProductClassController_deleteMany"];
  };
  "/business-book/api/party-business-class/test": {
    get: operations["PartyBusinessClassController_test"];
  };
  "/business-book/api/party-business-class/find": {
    post: operations["PartyBusinessClassController_findAll"];
  };
  [path: `/business-book/api/party-business-class/${number}`]: {
    get: operations["PartyBusinessClassController_findById"];
    delete: operations["PartyBusinessClassController_delete"];
  };
  "/business-book/api/party-business-class": {
    put: operations["PartyBusinessClassController_update"];
    post: operations["PartyBusinessClassController_create"];
  };
  [path: `/business-book/api/party-business-class/many/${string}`]: {
    delete: operations["PartyBusinessClassController_deleteMany"];
  };
  "/business-book/api/party-standard-class/test": {
    get: operations["PartyStandardClassController_test"];
  };
  "/business-book/api/party-standard-class/find": {
    post: operations["PartyStandardClassController_findAll"];
  };
  [path: `/business-book/api/party-standard-class/${number}`]: {
    get: operations["PartyStandardClassController_findById"];
    delete: operations["PartyStandardClassController_delete"];
  };
  "/business-book/api/party-standard-class": {
    put: operations["PartyStandardClassController_update"];
    post: operations["PartyStandardClassController_create"];
  };
  [path: `/business-book/api/party-standard-class/many/${string}`]: {
    delete: operations["PartyStandardClassController_deleteMany"];
  };
  "/business-book/api/party-contact/test": {
    get: operations["PartyContactController_test"];
  };
  "/business-book/api/party-contact/find": {
    post: operations["PartyContactController_findAll"];
  };
  [path: `/business-book/api/party-contact/${number}`]: {
    get: operations["PartyContactController_findById"];
    delete: operations["PartyContactController_delete"];
  };
  "/business-book/api/party-contact": {
    put: operations["PartyContactController_update"];
    post: operations["PartyContactController_create"];
  };
  [path: `/business-book/api/party-contact/many/${string}`]: {
    delete: operations["PartyContactController_deleteMany"];
  };
  "/business-book/api/party-media/test": {
    get: operations["PartyMediaController_test"];
  };
  "/business-book/api/party-media/find": {
    post: operations["PartyMediaController_findAll"];
  };
  [path: `/business-book/api/party-media/${number}`]: {
    get: operations["PartyMediaController_findById"];
    delete: operations["PartyMediaController_delete"];
  };
  "/business-book/api/party-media": {
    put: operations["PartyMediaController_update"];
    post: operations["PartyMediaController_create"];
  };
  [path: `/business-book/api/party-media/many/${string}`]: {
    delete: operations["PartyMediaController_deleteMany"];
  };
  "/business-book/api/party-identifier/test": {
    get: operations["PartyIdentifierController_test"];
  };
  "/business-book/api/party-identifier/find": {
    post: operations["PartyIdentifierController_findAll"];
  };
  [path: `/business-book/api/party-identifier/${number}`]: {
    get: operations["PartyIdentifierController_findById"];
    delete: operations["PartyIdentifierController_delete"];
  };
  "/business-book/api/party-identifier": {
    put: operations["PartyIdentifierController_update"];
    post: operations["PartyIdentifierController_create"];
  };
  [path: `/business-book/api/party-identifier/many/${string}`]: {
    delete: operations["PartyIdentifierController_deleteMany"];
  };
  "/business-book/api/portfolio/test": {
    get: operations["PortfolioController_test"];
  };
  "/business-book/api/portfolio/find": {
    post: operations["PortfolioController_findAll"];
  };
  [path: `/business-book/api/portfolio/${number}`]: {
    get: operations["PortfolioController_findById"];
    delete: operations["PortfolioController_delete"];
  };
  "/business-book/api/portfolio": {
    put: operations["PortfolioController_update"];
    post: operations["PortfolioController_create"];
  };
  [path: `/business-book/api/portfolio/many/${string}`]: {
    delete: operations["PortfolioController_deleteMany"];
  };
  "/business-book/api/post/test": {
    get: operations["PostController_test"];
  };
  "/business-book/api/post/find": {
    post: operations["PostController_findAll"];
  };
  [path: `/business-book/api/post/${number}`]: {
    get: operations["PostController_findById"];
    delete: operations["PostController_delete"];
  };
  "/business-book/api/post": {
    put: operations["PostController_update"];
    post: operations["PostController_create"];
  };
  [path: `/business-book/api/post/many/${string}`]: {
    delete: operations["PostController_deleteMany"];
  };
  "/business-book/api/base/baseOneDto": {
    get: operations["BaseController_baseOneDto"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    PaginateDto: {
      data: unknown[][];
      count: number;
    };
    BusinessOneDto: {
      id: number;
      tenantId: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      version: number;
    };
    LeadOneDto: {
      id: number;
      tenantId: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      version: number;
    };
    KeywordOneDto: {
      id: number;
      tenantId: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      version: number;
    };
    ContentCategoryOneDto: {
      id: number;
      tenantId: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      version: number;
    };
    ContentOneDto: {
      id: number;
      tenantId: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      title: string;
      summary: string;
      txt: string;
      seqNum: number;
      poster: components["schemas"]["MediaOneDto"];
      medias: components["schemas"]["MediaOneDto"][];
      keywords: components["schemas"]["KeywordOneDto"][];
      categories: components["schemas"]["ContentCategoryOneDto"][];
      version: number;
    };
    MediaOneDto: {
      id: number;
      tenantId: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      title: string;
      summary: string;
      seqNum: number;
      content: components["schemas"]["ContentOneDto"];
      business: components["schemas"]["BusinessOneDto"];
      version: number;
    };
    AboutOneDto: {
      id: number;
      tenantId: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      business: components["schemas"]["BusinessOneDto"];
      lead: components["schemas"]["LeadOneDto"];
      title: string;
      summary: string;
      txt: string;
      seqNum: number;
      poster: components["schemas"]["MediaOneDto"];
      medias: components["schemas"]["MediaOneDto"][];
      keywords: components["schemas"]["KeywordOneDto"][];
      categories: components["schemas"]["ContentCategoryOneDto"][];
      version: number;
    };
    DataTableFilterMeta: Record<string, never>;
    BaseQueryDto: {
      /** @default 0 */
      first?: Record<string, never>;
      /** @default 20 */
      rows?: Record<string, never>;
      /** @default 1 */
      page?: Record<string, never>;
      sortField?: string;
      /** @default null */
      sortOrder?: Record<string, never>;
      filters?: components["schemas"]["DataTableFilterMeta"];
    };
    AudienceOneDto: {
      id: number;
      tenantId: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      version: number;
    };
    AudienceQueryDto: {
      /** @default 0 */
      first?: Record<string, never>;
      /** @default 20 */
      rows?: Record<string, never>;
      /** @default 1 */
      page?: Record<string, never>;
      sortField?: string;
      /** @default null */
      sortOrder?: Record<string, never>;
      filters?: components["schemas"]["DataTableFilterMeta"];
    };
    LoginDto: {
      username: string;
      password: string;
      /** @default false */
      rememberMe: boolean;
      tenantId?: string;
    };
    LoginResponseDto: {
      accessToken: string;
    };
    BusinessQueryDto: {
      /** @default 0 */
      first?: Record<string, never>;
      /** @default 20 */
      rows?: Record<string, never>;
      /** @default 1 */
      page?: Record<string, never>;
      sortField?: string;
      /** @default null */
      sortOrder?: Record<string, never>;
      filters?: components["schemas"]["DataTableFilterMeta"];
    };
    CompetitorOneDto: {
      id: number;
      tenantId: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      version: number;
    };
    CompetitorQueryDto: {
      /** @default 0 */
      first?: Record<string, never>;
      /** @default 20 */
      rows?: Record<string, never>;
      /** @default 1 */
      page?: Record<string, never>;
      sortField?: string;
      /** @default null */
      sortOrder?: Record<string, never>;
      filters?: components["schemas"]["DataTableFilterMeta"];
    };
    OtherContentOneDto: {
      id: number;
      tenantId: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      title: string;
      summary: string;
      txt: string;
      seqNum: number;
      poster: components["schemas"]["MediaOneDto"];
      medias: components["schemas"]["MediaOneDto"][];
      keywords: components["schemas"]["KeywordOneDto"][];
      categories: components["schemas"]["ContentCategoryOneDto"][];
      version: number;
    };
    OtherContentQueryDto: {
      /** @default 0 */
      first?: Record<string, never>;
      /** @default 20 */
      rows?: Record<string, never>;
      /** @default 1 */
      page?: Record<string, never>;
      sortField?: string;
      /** @default null */
      sortOrder?: Record<string, never>;
      filters?: components["schemas"]["DataTableFilterMeta"];
    };
    ContentCategoryQueryDto: {
      /** @default 0 */
      first?: Record<string, never>;
      /** @default 20 */
      rows?: Record<string, never>;
      /** @default 1 */
      page?: Record<string, never>;
      sortField?: string;
      /** @default null */
      sortOrder?: Record<string, never>;
      filters?: components["schemas"]["DataTableFilterMeta"];
    };
    CustomerOneDto: {
      id: number;
      tenantId: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      version: number;
    };
    CustomerQueryDto: {
      /** @default 0 */
      first?: Record<string, never>;
      /** @default 20 */
      rows?: Record<string, never>;
      /** @default 1 */
      page?: Record<string, never>;
      sortField?: string;
      /** @default null */
      sortOrder?: Record<string, never>;
      filters?: components["schemas"]["DataTableFilterMeta"];
    };
    KeywordQueryDto: {
      /** @default 0 */
      first?: Record<string, never>;
      /** @default 20 */
      rows?: Record<string, never>;
      /** @default 1 */
      page?: Record<string, never>;
      sortField?: string;
      /** @default null */
      sortOrder?: Record<string, never>;
      filters?: components["schemas"]["DataTableFilterMeta"];
    };
    LeadQueryDto: {
      /** @default 0 */
      first?: Record<string, never>;
      /** @default 20 */
      rows?: Record<string, never>;
      /** @default 1 */
      page?: Record<string, never>;
      sortField?: string;
      /** @default null */
      sortOrder?: Record<string, never>;
      filters?: components["schemas"]["DataTableFilterMeta"];
    };
    MediaQueryDto: {
      /** @default 0 */
      first?: Record<string, never>;
      /** @default 20 */
      rows?: Record<string, never>;
      /** @default 1 */
      page?: Record<string, never>;
      sortField?: string;
      /** @default null */
      sortOrder?: Record<string, never>;
      filters?: components["schemas"]["DataTableFilterMeta"];
    };
    NewsOneDto: {
      id: number;
      tenantId: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      version: number;
    };
    NewsQueryDto: {
      /** @default 0 */
      first?: Record<string, never>;
      /** @default 20 */
      rows?: Record<string, never>;
      /** @default 1 */
      page?: Record<string, never>;
      sortField?: string;
      /** @default null */
      sortOrder?: Record<string, never>;
      filters?: components["schemas"]["DataTableFilterMeta"];
    };
    PartyProductClassOneDto: {
      id: number;
      tenantId: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      version: number;
    };
    PartyProductClassQueryDto: {
      /** @default 0 */
      first?: Record<string, never>;
      /** @default 20 */
      rows?: Record<string, never>;
      /** @default 1 */
      page?: Record<string, never>;
      sortField?: string;
      /** @default null */
      sortOrder?: Record<string, never>;
      filters?: components["schemas"]["DataTableFilterMeta"];
    };
    PartyBusinessClassOneDto: {
      id: number;
      tenantId: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      version: number;
    };
    PartyBusinessClassQueryDto: {
      /** @default 0 */
      first?: Record<string, never>;
      /** @default 20 */
      rows?: Record<string, never>;
      /** @default 1 */
      page?: Record<string, never>;
      sortField?: string;
      /** @default null */
      sortOrder?: Record<string, never>;
      filters?: components["schemas"]["DataTableFilterMeta"];
    };
    PartyStandardClassOneDto: {
      id: number;
      tenantId: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      version: number;
    };
    PartyStandardClassQueryDto: {
      /** @default 0 */
      first?: Record<string, never>;
      /** @default 20 */
      rows?: Record<string, never>;
      /** @default 1 */
      page?: Record<string, never>;
      sortField?: string;
      /** @default null */
      sortOrder?: Record<string, never>;
      filters?: components["schemas"]["DataTableFilterMeta"];
    };
    PartyContactOneDto: {
      id: number;
      tenantId: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      version: number;
    };
    PartyContactQueryDto: {
      /** @default 0 */
      first?: Record<string, never>;
      /** @default 20 */
      rows?: Record<string, never>;
      /** @default 1 */
      page?: Record<string, never>;
      sortField?: string;
      /** @default null */
      sortOrder?: Record<string, never>;
      filters?: components["schemas"]["DataTableFilterMeta"];
    };
    PartyMediaOneDto: {
      id: number;
      tenantId: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      version: number;
    };
    PartyMediaQueryDto: {
      /** @default 0 */
      first?: Record<string, never>;
      /** @default 20 */
      rows?: Record<string, never>;
      /** @default 1 */
      page?: Record<string, never>;
      sortField?: string;
      /** @default null */
      sortOrder?: Record<string, never>;
      filters?: components["schemas"]["DataTableFilterMeta"];
    };
    PartyIdentifierOneDto: {
      id: number;
      tenantId: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      version: number;
    };
    PartyIdentifierQueryDto: {
      /** @default 0 */
      first?: Record<string, never>;
      /** @default 20 */
      rows?: Record<string, never>;
      /** @default 1 */
      page?: Record<string, never>;
      sortField?: string;
      /** @default null */
      sortOrder?: Record<string, never>;
      filters?: components["schemas"]["DataTableFilterMeta"];
    };
    PortfolioOneDto: {
      id: number;
      tenantId: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      version: number;
    };
    PortfolioQueryDto: {
      /** @default 0 */
      first?: Record<string, never>;
      /** @default 20 */
      rows?: Record<string, never>;
      /** @default 1 */
      page?: Record<string, never>;
      sortField?: string;
      /** @default null */
      sortOrder?: Record<string, never>;
      filters?: components["schemas"]["DataTableFilterMeta"];
    };
    PostOneDto: {
      id: number;
      tenantId: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      version: number;
    };
    PostQueryDto: {
      /** @default 0 */
      first?: Record<string, never>;
      /** @default 20 */
      rows?: Record<string, never>;
      /** @default 1 */
      page?: Record<string, never>;
      sortField?: string;
      /** @default null */
      sortOrder?: Record<string, never>;
      filters?: components["schemas"]["DataTableFilterMeta"];
    };
    BaseOneDto: {
      id: number;
      tenantId: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      version: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  AboutController_findAll: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BaseQueryDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginateDto"] & {
            data?: components["schemas"]["AboutOneDto"][];
            count?: number;
          };
        };
      };
      201: {
        content: never;
      };
    };
  };
  AboutController_findById: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["AboutOneDto"];
        };
      };
    };
  };
  AboutController_delete: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  AboutController_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AboutOneDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["AboutOneDto"];
        };
      };
    };
  };
  AboutController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AboutOneDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["AboutOneDto"];
        };
      };
    };
  };
  AboutController_deleteMany: {
    parameters: {
      path: {
        ids: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  AudienceController_test: {
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  AudienceController_findAll: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AudienceQueryDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginateDto"] & {
            data?: components["schemas"]["AudienceOneDto"][];
            count?: number;
          };
        };
      };
      201: {
        content: never;
      };
    };
  };
  AudienceController_findById: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["AudienceOneDto"];
        };
      };
    };
  };
  AudienceController_delete: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  AudienceController_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AudienceOneDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["AudienceOneDto"];
        };
      };
    };
  };
  AudienceController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AudienceOneDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["AudienceOneDto"];
        };
      };
    };
  };
  AudienceController_deleteMany: {
    parameters: {
      path: {
        ids: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  AuthController_login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["LoginResponseDto"];
        };
      };
    };
  };
  BusinessController_test: {
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  BusinessController_findAll: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BusinessQueryDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginateDto"] & {
            data?: components["schemas"]["BusinessOneDto"][];
            count?: number;
          };
        };
      };
      201: {
        content: never;
      };
    };
  };
  BusinessController_findById: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["BusinessOneDto"];
        };
      };
    };
  };
  BusinessController_delete: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  BusinessController_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BusinessOneDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["BusinessOneDto"];
        };
      };
    };
  };
  BusinessController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BusinessOneDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["BusinessOneDto"];
        };
      };
    };
  };
  BusinessController_deleteMany: {
    parameters: {
      path: {
        ids: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  CompetitorController_test: {
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  CompetitorController_findAll: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CompetitorQueryDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginateDto"] & {
            data?: components["schemas"]["CompetitorOneDto"][];
            count?: number;
          };
        };
      };
      201: {
        content: never;
      };
    };
  };
  CompetitorController_findById: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["CompetitorOneDto"];
        };
      };
    };
  };
  CompetitorController_delete: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  CompetitorController_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CompetitorOneDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["CompetitorOneDto"];
        };
      };
    };
  };
  CompetitorController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CompetitorOneDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["CompetitorOneDto"];
        };
      };
    };
  };
  CompetitorController_deleteMany: {
    parameters: {
      path: {
        ids: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  OtherContentController_test: {
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  OtherContentController_findAll: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["OtherContentQueryDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginateDto"] & {
            data?: components["schemas"]["OtherContentOneDto"][];
            count?: number;
          };
        };
      };
      201: {
        content: never;
      };
    };
  };
  OtherContentController_findById: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["OtherContentOneDto"];
        };
      };
    };
  };
  OtherContentController_delete: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  OtherContentController_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["OtherContentOneDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["OtherContentOneDto"];
        };
      };
    };
  };
  OtherContentController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["OtherContentOneDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["OtherContentOneDto"];
        };
      };
    };
  };
  OtherContentController_deleteMany: {
    parameters: {
      path: {
        ids: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  ContentCategoryController_test: {
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  ContentCategoryController_findAll: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContentCategoryQueryDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginateDto"] & {
            data?: components["schemas"]["ContentCategoryOneDto"][];
            count?: number;
          };
        };
      };
      201: {
        content: never;
      };
    };
  };
  ContentCategoryController_findById: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["ContentCategoryOneDto"];
        };
      };
    };
  };
  ContentCategoryController_delete: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  ContentCategoryController_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContentCategoryOneDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["ContentCategoryOneDto"];
        };
      };
    };
  };
  ContentCategoryController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContentCategoryOneDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["ContentCategoryOneDto"];
        };
      };
    };
  };
  ContentCategoryController_deleteMany: {
    parameters: {
      path: {
        ids: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  CustomerController_test: {
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  CustomerController_findAll: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomerQueryDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginateDto"] & {
            data?: components["schemas"]["CustomerOneDto"][];
            count?: number;
          };
        };
      };
      201: {
        content: never;
      };
    };
  };
  CustomerController_findById: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["CustomerOneDto"];
        };
      };
    };
  };
  CustomerController_delete: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  CustomerController_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomerOneDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["CustomerOneDto"];
        };
      };
    };
  };
  CustomerController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomerOneDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["CustomerOneDto"];
        };
      };
    };
  };
  CustomerController_deleteMany: {
    parameters: {
      path: {
        ids: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  KeywordController_test: {
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  KeywordController_findAll: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["KeywordQueryDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginateDto"] & {
            data?: components["schemas"]["KeywordOneDto"][];
            count?: number;
          };
        };
      };
      201: {
        content: never;
      };
    };
  };
  KeywordController_findById: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["KeywordOneDto"];
        };
      };
    };
  };
  KeywordController_delete: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  KeywordController_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["KeywordOneDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["KeywordOneDto"];
        };
      };
    };
  };
  KeywordController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["KeywordOneDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["KeywordOneDto"];
        };
      };
    };
  };
  KeywordController_deleteMany: {
    parameters: {
      path: {
        ids: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  LeadController_test: {
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  LeadController_findAll: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LeadQueryDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginateDto"] & {
            data?: components["schemas"]["LeadOneDto"][];
            count?: number;
          };
        };
      };
      201: {
        content: never;
      };
    };
  };
  LeadController_findById: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["LeadOneDto"];
        };
      };
    };
  };
  LeadController_delete: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  LeadController_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LeadOneDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["LeadOneDto"];
        };
      };
    };
  };
  LeadController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LeadOneDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["LeadOneDto"];
        };
      };
    };
  };
  LeadController_deleteMany: {
    parameters: {
      path: {
        ids: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  MediaController_test: {
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  MediaController_findAll: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["MediaQueryDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginateDto"] & {
            data?: components["schemas"]["MediaOneDto"][];
            count?: number;
          };
        };
      };
      201: {
        content: never;
      };
    };
  };
  MediaController_findById: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["MediaOneDto"];
        };
      };
    };
  };
  MediaController_delete: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  MediaController_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["MediaOneDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["MediaOneDto"];
        };
      };
    };
  };
  MediaController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["MediaOneDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["MediaOneDto"];
        };
      };
    };
  };
  MediaController_deleteMany: {
    parameters: {
      path: {
        ids: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  NewsController_test: {
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  NewsController_findAll: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewsQueryDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginateDto"] & {
            data?: components["schemas"]["NewsOneDto"][];
            count?: number;
          };
        };
      };
      201: {
        content: never;
      };
    };
  };
  NewsController_findById: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["NewsOneDto"];
        };
      };
    };
  };
  NewsController_delete: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  NewsController_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewsOneDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["NewsOneDto"];
        };
      };
    };
  };
  NewsController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewsOneDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["NewsOneDto"];
        };
      };
    };
  };
  NewsController_deleteMany: {
    parameters: {
      path: {
        ids: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  PartyProductClassController_test: {
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  PartyProductClassController_findAll: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartyProductClassQueryDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginateDto"] & {
            data?: components["schemas"]["PartyProductClassOneDto"][];
            count?: number;
          };
        };
      };
      201: {
        content: never;
      };
    };
  };
  PartyProductClassController_findById: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["PartyProductClassOneDto"];
        };
      };
    };
  };
  PartyProductClassController_delete: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  PartyProductClassController_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartyProductClassOneDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["PartyProductClassOneDto"];
        };
      };
    };
  };
  PartyProductClassController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartyProductClassOneDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["PartyProductClassOneDto"];
        };
      };
    };
  };
  PartyProductClassController_deleteMany: {
    parameters: {
      path: {
        ids: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  PartyBusinessClassController_test: {
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  PartyBusinessClassController_findAll: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartyBusinessClassQueryDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginateDto"] & {
            data?: components["schemas"]["PartyBusinessClassOneDto"][];
            count?: number;
          };
        };
      };
      201: {
        content: never;
      };
    };
  };
  PartyBusinessClassController_findById: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["PartyBusinessClassOneDto"];
        };
      };
    };
  };
  PartyBusinessClassController_delete: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  PartyBusinessClassController_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartyBusinessClassOneDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["PartyBusinessClassOneDto"];
        };
      };
    };
  };
  PartyBusinessClassController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartyBusinessClassOneDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["PartyBusinessClassOneDto"];
        };
      };
    };
  };
  PartyBusinessClassController_deleteMany: {
    parameters: {
      path: {
        ids: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  PartyStandardClassController_test: {
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  PartyStandardClassController_findAll: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartyStandardClassQueryDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginateDto"] & {
            data?: components["schemas"]["PartyStandardClassOneDto"][];
            count?: number;
          };
        };
      };
      201: {
        content: never;
      };
    };
  };
  PartyStandardClassController_findById: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["PartyStandardClassOneDto"];
        };
      };
    };
  };
  PartyStandardClassController_delete: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  PartyStandardClassController_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartyStandardClassOneDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["PartyStandardClassOneDto"];
        };
      };
    };
  };
  PartyStandardClassController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartyStandardClassOneDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["PartyStandardClassOneDto"];
        };
      };
    };
  };
  PartyStandardClassController_deleteMany: {
    parameters: {
      path: {
        ids: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  PartyContactController_test: {
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  PartyContactController_findAll: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartyContactQueryDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginateDto"] & {
            data?: components["schemas"]["PartyContactOneDto"][];
            count?: number;
          };
        };
      };
      201: {
        content: never;
      };
    };
  };
  PartyContactController_findById: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["PartyContactOneDto"];
        };
      };
    };
  };
  PartyContactController_delete: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  PartyContactController_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartyContactOneDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["PartyContactOneDto"];
        };
      };
    };
  };
  PartyContactController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartyContactOneDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["PartyContactOneDto"];
        };
      };
    };
  };
  PartyContactController_deleteMany: {
    parameters: {
      path: {
        ids: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  PartyMediaController_test: {
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  PartyMediaController_findAll: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartyMediaQueryDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginateDto"] & {
            data?: components["schemas"]["PartyMediaOneDto"][];
            count?: number;
          };
        };
      };
      201: {
        content: never;
      };
    };
  };
  PartyMediaController_findById: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["PartyMediaOneDto"];
        };
      };
    };
  };
  PartyMediaController_delete: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  PartyMediaController_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartyMediaOneDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["PartyMediaOneDto"];
        };
      };
    };
  };
  PartyMediaController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartyMediaOneDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["PartyMediaOneDto"];
        };
      };
    };
  };
  PartyMediaController_deleteMany: {
    parameters: {
      path: {
        ids: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  PartyIdentifierController_test: {
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  PartyIdentifierController_findAll: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartyIdentifierQueryDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginateDto"] & {
            data?: components["schemas"]["PartyIdentifierOneDto"][];
            count?: number;
          };
        };
      };
      201: {
        content: never;
      };
    };
  };
  PartyIdentifierController_findById: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["PartyIdentifierOneDto"];
        };
      };
    };
  };
  PartyIdentifierController_delete: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  PartyIdentifierController_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartyIdentifierOneDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["PartyIdentifierOneDto"];
        };
      };
    };
  };
  PartyIdentifierController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartyIdentifierOneDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["PartyIdentifierOneDto"];
        };
      };
    };
  };
  PartyIdentifierController_deleteMany: {
    parameters: {
      path: {
        ids: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  PortfolioController_test: {
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  PortfolioController_findAll: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PortfolioQueryDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginateDto"] & {
            data?: components["schemas"]["PortfolioOneDto"][];
            count?: number;
          };
        };
      };
      201: {
        content: never;
      };
    };
  };
  PortfolioController_findById: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["PortfolioOneDto"];
        };
      };
    };
  };
  PortfolioController_delete: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  PortfolioController_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PortfolioOneDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["PortfolioOneDto"];
        };
      };
    };
  };
  PortfolioController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PortfolioOneDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["PortfolioOneDto"];
        };
      };
    };
  };
  PortfolioController_deleteMany: {
    parameters: {
      path: {
        ids: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  PostController_test: {
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  PostController_findAll: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PostQueryDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginateDto"] & {
            data?: components["schemas"]["PostOneDto"][];
            count?: number;
          };
        };
      };
      201: {
        content: never;
      };
    };
  };
  PostController_findById: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["PostOneDto"];
        };
      };
    };
  };
  PostController_delete: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  PostController_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PostOneDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["PostOneDto"];
        };
      };
    };
  };
  PostController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PostOneDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
      default: {
        content: {
          "application/json": components["schemas"]["PostOneDto"];
        };
      };
    };
  };
  PostController_deleteMany: {
    parameters: {
      path: {
        ids: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  BaseController_baseOneDto: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BaseOneDto"];
        };
      };
    };
  };
}
