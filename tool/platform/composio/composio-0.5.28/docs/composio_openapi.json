{
  "components": {
    "schemas": {
      "MagicLinkResDTO": {
        "properties": {
          "status": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "status"
        ]
      },
      "MagicLinkReqDTO": {
        "properties": {
          "email": {
            "format": "email",
            "type": "string",
            "description": "The email of the user"
          },
          "verifyHost": {
            "type": "string",
            "description": "The frontend host of the user"
          }
        },
        "type": "object",
        "required": [
          "email",
          "verifyHost"
        ]
      },
      "LogoutResDTO": {
        "properties": {
          "message": {
            "type": "string",
            "description": "Message confirming the logout"
          }
        },
        "type": "object",
        "required": [
          "message"
        ]
      },
      "VerifyMagicLinkReqDTO": {
        "properties": {
          "token": {
            "type": "string",
            "description": "The magic link token"
          }
        },
        "type": "object",
        "required": [
          "token"
        ]
      },
      "VerifyMagicLinkDataDTO": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "isValid": {
            "type": "boolean"
          },
          "jwtToken": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          }
        },
        "type": "object",
        "required": [
          "clientId",
          "isValid",
          "jwtToken",
          "email"
        ]
      },
      "VerifyMagicLinkResDTO": {
        "properties": {
          "message": {
            "type": "string",
            "description": "Message indicating the result of the verification"
          },
          "data": {
            "$ref": "#/components/schemas/VerifyMagicLinkDataDTO",
            "description": "Data containing client and token information if verification is successful"
          }
        },
        "type": "object",
        "required": [
          "message"
        ]
      },
      "IdentifyClientReqDTO": {
        "properties": {
          "hash": {
            "type": "string",
            "description": "The hash of the client"
          },
          "framework": {
            "type": "string",
            "description": "The framework used by the client"
          }
        },
        "type": "object",
        "required": [
          "hash"
        ]
      },
      "IdentifyClientResDTO": {
        "properties": {
          "clientId": {
            "type": "string",
            "description": "The client ID"
          },
          "apiKey": {
            "type": "string",
            "description": "The API key associated with the client"
          },
          "email": {
            "type": "string",
            "description": "The email associated with the client"
          }
        },
        "type": "object",
        "required": [
          "clientId",
          "apiKey",
          "email"
        ]
      },
      "UserGitUserInfo": {
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "format": "email",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "email"
        ]
      },
      "TrackClientReqDTO": {
        "properties": {
          "framework": {
            "type": "string",
            "description": "The framework used by the client"
          },
          "mac_address": {
            "type": "string",
            "description": "The MAC address of the client device"
          },
          "user_git_user_info": {
            "$ref": "#/components/schemas/UserGitUserInfo",
            "description": "User Git information"
          }
        },
        "type": "object",
        "required": [
          "framework"
        ]
      },
      "TrackClientResDTO": {
        "properties": {
          "message": {
            "type": "string",
            "description": "Message indicating the result of the tracking operation"
          }
        },
        "type": "object",
        "required": [
          "message"
        ]
      },
      "DeleteRowAPIDTO": {
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the delete operation"
          },
          "count": {
            "type": "number",
            "description": "Number of records deleted"
          }
        },
        "type": "object",
        "required": [
          "status",
          "count"
        ]
      },
      "InviteMemberReqDTO": {
        "properties": {
          "email": {
            "format": "email",
            "type": "string",
            "description": "The email of the member"
          },
          "name": {
            "type": "string",
            "description": "The name of the member"
          },
          "verifyHost": {
            "type": "string",
            "description": "The host to verify the member"
          }
        },
        "type": "object",
        "required": [
          "email",
          "name",
          "verifyHost"
        ]
      },
      "MemberResDTO": {
        "properties": {
          "email": {
            "type": "string",
            "description": "The email of the member"
          },
          "id": {
            "type": "string",
            "description": "The uuid identifier for the member"
          },
          "name": {
            "type": "string",
            "description": "The name of the member"
          },
          "createdAt": {
            "pattern": "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
            "type": "string",
            "description": "The creation date of the member record"
          },
          "updatedAt": {
            "pattern": "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
            "type": "string",
            "description": "The last update date of the member record"
          }
        },
        "type": "object",
        "required": [
          "email",
          "id",
          "name"
        ]
      },
      "GenerateAPIKeyReqDTO": {
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the API key to be generated"
          }
        },
        "type": "object",
        "required": [
          "name"
        ]
      },
      "APIKeyResDTO": {
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the API key"
          },
          "name": {
            "type": "string",
            "description": "The name of the API key"
          },
          "createdAt": {
            "pattern": "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
            "type": "string",
            "description": "The creation date of the API key"
          },
          "updatedAt": {
            "pattern": "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
            "type": "string",
            "description": "The last update date of the API key"
          },
          "key": {
            "type": "string",
            "description": "The generated API key"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "createdAt",
          "updatedAt",
          "key"
        ]
      },
      "DeleteAPIKeyReqDTO": {
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the API key to be deleted"
          }
        },
        "type": "object",
        "required": [
          "id"
        ]
      },
      "SingleAppInfoResDTO": {
        "properties": {
          "appId": {
            "type": "string",
            "description": "The unique identifier for the app"
          },
          "key": {
            "type": "string",
            "description": "The key of the app"
          },
          "name": {
            "type": "string",
            "description": "The name of the app"
          },
          "description": {
            "type": "string",
            "description": "The description of the app"
          },
          "logo": {
            "type": "string",
            "description": "The logo of the app"
          },
          "categories": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "The categories of the app"
          },
          "path": {
            "type": "string",
            "description": "The path of the app"
          },
          "docs": {
            "type": "string",
            "description": "The documentation URL of the app"
          },
          "configuration_docs_text": {
            "type": "string",
            "description": "The configuration documentation text of the app"
          },
          "status": {
            "type": "string",
            "description": "The status of the app"
          },
          "documentation_doc_text": {
            "type": "string",
            "description": "The documentation text of the app"
          },
          "testConnectors": {
            "items": {
              
            },
            "type": "array",
            "description": "The test connectors of the app"
          },
          "no_auth": {
            "type": "boolean",
            "description": "Indicates if the app has no authentication"
          },
          "auth_schemes": {
            "items": {
              
            },
            "type": "array",
            "description": "The authentication schemes of the app"
          },
          "meta": {
            "description": "The metadata of the app"
          },
          "yaml": {
            "description": "The yaml of the app"
          }
        },
        "type": "object",
        "required": [
          "appId",
          "key",
          "name",
          "description"
        ]
      },
      "AddToolsReqDTO": {
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the tool"
          },
          "openApiSpecYaml": {
            "type": "string",
            "description": "The OpenAPI specification in YAML format"
          },
          "integrationYaml": {
            "type": "string",
            "description": "The integration details in YAML format"
          }
        },
        "type": "object",
        "required": [
          "name",
          "openApiSpecYaml",
          "integrationYaml"
        ]
      },
      "OpenAPISpecListResDTO": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the OpenAPI spec"
          },
          "name": {
            "type": "string",
            "description": "Name of the OpenAPI spec"
          },
          "clientId": {
            "type": "string",
            "description": "Client identifier"
          },
          "openApiSpec": {
            "type": "string",
            "description": "OpenAPI specification in YAML format"
          },
          "integrationYaml": {
            "type": "string",
            "description": "Integration details in YAML format"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the OpenAPI spec is enabled"
          },
          "openAPISpecURL": {
            "type": "string",
            "description": "URL to the OpenAPI specification",
            "format": "uri",
            "nullable": true
          },
          "integrationYAMLURL": {
            "type": "string",
            "description": "URL to the integration YAML",
            "format": "uri",
            "nullable": true
          },
          "lastSyncAt": {
            "pattern": "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
            "type": "string",
            "description": "Last synchronization date and time",
            "format": "date-time"
          },
          "createdAt": {
            "pattern": "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
            "type": "string",
            "description": "Creation date and time",
            "format": "date-time"
          },
          "updatedAt": {
            "pattern": "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
            "type": "string",
            "description": "Last update date and time",
            "format": "date-time"
          },
          "jobStatus": {
            "enum": [
              "running",
              "success",
              "failed"
            ],
            "type": "string",
            "description": "The job status of the app"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "clientId",
          "openApiSpec",
          "integrationYaml",
          "enabled",
          "lastSyncAt",
          "createdAt",
          "updatedAt"
        ]
      },
      "AddRepoURLResDTO": {
        "properties": {
          "repoUrl": {
            "type": "string",
            "description": "Repository URL"
          }
        },
        "type": "object",
        "required": [
          "repoUrl"
        ]
      },
      "DeleteToolsReqDTO": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the tool"
          }
        },
        "type": "object",
        "required": [
          "name"
        ]
      },
      "DeleteToolsResDTO": {
        "properties": {
          "message": {
            "type": "string",
            "description": "Message indicating successful deletion of tools"
          }
        },
        "type": "object",
        "required": [
          "message"
        ]
      },
      "AddToolsRequestDTO": {
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the tool"
          },
          "open_api_spec_yaml": {
            "type": "string",
            "description": "The OpenAPI specification in YAML format"
          },
          "integration_yaml": {
            "type": "string",
            "description": "The integration details in YAML format"
          }
        },
        "type": "object",
        "required": [
          "name",
          "open_api_spec_yaml",
          "integration_yaml"
        ]
      },
      "AddRepoURLReqDTO": {
        "properties": {
          "repoUrl": {
            "type": "string",
            "description": "Repository URL"
          }
        },
        "type": "object",
        "required": [
          "repoUrl"
        ]
      },
      "AppQueryDTO": {
        "properties": {
          "category": {
            "type": "string",
            "description": "Category of the app"
          }
        },
        "type": "object"
      },
      "AppInfoResponseDto": {
        "properties": {
          "appId": {
            "type": "string",
            "description": "The ID of the app"
          },
          "key": {
            "type": "string",
            "description": "The key of the app"
          },
          "name": {
            "type": "string",
            "description": "The name of the app"
          },
          "description": {
            "type": "string",
            "description": "The description of the app"
          },
          "logo": {
            "type": "string",
            "description": "The logo of the app"
          },
          "categories": {
            "items": {
              
            },
            "type": "string",
            "description": "The categories of the app"
          },
          "enabled": {
            "type": "boolean",
            "description": "Indicates if the app is enabled"
          },
          "no_auth": {
            "type": "boolean",
            "description": "Indicates if the app has no authentication"
          }
        },
        "type": "object",
        "required": [
          "appId",
          "key",
          "name",
          "description",
          "logo",
          "categories",
          "enabled"
        ]
      },
      "AppListResDTO": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/AppInfoResponseDto"
            },
            "type": "array",
            "description": "List of app details"
          },
          "totalPages": {
            "type": "number",
            "description": "Total number of pages"
          }
        },
        "type": "object",
        "required": [
          "items",
          "totalPages"
        ]
      },
      "GetConnectorInfoResDTO": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the connector"
          },
          "authScheme": {
            "type": "string",
            "description": "Authentication scheme used by the connector"
          },
          "name": {
            "type": "string",
            "description": "Name of the connector"
          },
          "createdAt": {
            "pattern": "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
            "type": "string",
            "description": "Creation date of the connector"
          },
          "updatedAt": {
            "pattern": "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
            "type": "string",
            "description": "Last update date of the connector"
          },
          "enabled": {
            "type": "boolean",
            "description": "Flag to indicate if the connector is currently enabled"
          },
          "deleted": {
            "type": "boolean",
            "description": "Flag to indicate if the connector has been deleted"
          },
          "appId": {
            "type": "string",
            "description": "Application ID associated with the connector"
          },
          "defaultConnectorId": {
            "type": "string",
            "description": "Default connector ID if one exists"
          },
          "authConfig": {
            "type": "object",
            "description": "Authentication configuration with sensitive data obscured"
          },
          "expectedInputFields": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of required fields expected from the customer"
          },
          "logo": {
            "type": "string",
            "description": "Logo URL of the application associated with the connector"
          },
          "appName": {
            "type": "string",
            "description": "Name of the application associated with the connector"
          },
          "useComposioAuth": {
            "type": "boolean",
            "description": "Flag to indicate if Composio authentication is used"
          }
        },
        "type": "object",
        "required": [
          "enabled",
          "appId",
          "authConfig",
          "expectedInputFields",
          "logo",
          "appName",
          "useComposioAuth"
        ]
      },
      "AuthConfigDTO": {
        "properties": {
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "user_scopes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CreateConnectorPayloadDTO": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the connector"
          },
          "authScheme": {
            "type": "string",
            "description": "Authentication scheme"
          },
          "authConfig": {
            "$ref": "#/components/schemas/AuthConfigDTO",
            "description": "Authentication configuration"
          },
          "useComposioAuth": {
            "type": "boolean",
            "description": "Flag to indicate if Composio authentication should be used",
            "anyOf": [
              {
                "type": "boolean"
              }
            ]
          },
          "appId": {
            "type": "string",
            "description": "Application ID"
          },
          "forceNewIntegration": {
            "type": "boolean",
            "description": "Flag to force new integration"
          }
        },
        "type": "object",
        "required": [
          "name",
          "appId"
        ]
      },
      "PatchConnectorReqDTO": {
        "properties": {
          "authConfig": {
            "type": "object",
            "description": "Authentication configuration for the connector"
          },
          "enabled": {
            "type": "boolean",
            "description": "Flag to indicate if the connector is enabled"
          }
        },
        "type": "object"
      },
      "PatchConnectorResDTO": {
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the patch operation"
          }
        },
        "type": "object",
        "required": [
          "status"
        ]
      },
      "ConnectorListItemDTO": {
        "properties": {
          "appName": {
            "type": "string",
            "description": "Application name associated with the connector"
          },
          "_count": {
            "type": "object",
            "description": "Count of connections for the connector"
          },
          "connections": {
            "items": {
              
            },
            "type": "array",
            "description": "List of connections with their details and request logs count"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the connector"
          },
          "name": {
            "type": "string",
            "description": "Name of the connector"
          },
          "authScheme": {
            "type": "string",
            "description": "Authentication scheme used by the connector"
          },
          "createdAt": {
            "oneOf": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date-time",
                "type": "string"
              }
            ],
            "description": "Creation date of the connector"
          },
          "updatedAt": {
            "oneOf": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date-time",
                "type": "string"
              }
            ],
            "description": "Last update date of the connector"
          },
          "enabled": {
            "type": "boolean",
            "description": "Flag to indicate if the connector is enabled"
          },
          "deleted": {
            "type": "boolean",
            "description": "Flag to indicate if the connector is deleted"
          },
          "appId": {
            "type": "string",
            "description": "App ID associated with the connector"
          },
          "defaultConnectorId": {
            "type": "string",
            "description": "Default connector ID if available"
          }
        },
        "type": "object",
        "required": [
          "appName",
          "_count",
          "connections",
          "id",
          "name",
          "authScheme",
          "createdAt",
          "updatedAt",
          "enabled",
          "appId"
        ]
      },
      "GetConnectorListResDTO": {
        "properties": {
          "items": {
            "items": {
              
            },
            "type": "array",
            "description": "List of connectors"
          },
          "totalPages": {
            "type": "number",
            "description": "Total number of pages available"
          },
          "page": {
            "type": "number",
            "description": "Current page number"
          }
        },
        "type": "object",
        "required": [
          "items",
          "totalPages",
          "page"
        ]
      },
      "PageInfo": {
        "properties": {
          "total": {
            "minimum": 0,
            "type": "integer"
          },
          "page": {
            "minimum": 1,
            "type": "integer"
          },
          "pageSize": {
            "minimum": 1,
            "type": "integer"
          },
          "totalPages": {
            "minimum": 1,
            "type": "integer"
          }
        },
        "type": "object",
        "required": [
          "total",
          "page",
          "pageSize",
          "totalPages"
        ]
      },
      "ConnectionWithAppData": {
        "properties": {
          "id": {
            "type": "string"
          },
          "integrationId": {
            "type": "string"
          },
          "clientUniqueUserId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "data": {
            "type": "object"
          },
          "deleted": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "createdAt": {
            "oneOf": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date-time",
                "type": "string"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date-time",
                "type": "string"
              }
            ]
          },
          "appUniqueId": {
            "type": "string"
          },
          "appName": {
            "type": "string"
          },
          "logo": {
            "type": "string"
          },
          "authConfig": {
            "type": "object"
          }
        },
        "type": "object",
        "required": [
          "id",
          "integrationId",
          "status",
          "createdAt",
          "updatedAt",
          "appUniqueId",
          "appName"
        ]
      },
      "GetConnectionsResult": {
        "properties": {
          "connections": {
            "items": {
              "$ref": "#/components/schemas/ConnectionWithAppData"
            },
            "type": "array"
          },
          "pageInfo": {
            "$ref": "#/components/schemas/PageInfo"
          }
        },
        "type": "object",
        "required": [
          "connections",
          "pageInfo"
        ]
      },
      "ActionExecutionServiceResDTO": {
        "properties": {
          "response_data": {
            "type": "boolean"
          },
          "execution_details": {
            "type": "object"
          }
        },
        "type": "object",
        "required": [
          "response_data",
          "execution_details"
        ]
      },
      "ToolsExecuteReqDto": {
        "properties": {
          "actionName": {
            "type": "string"
          },
          "runInSandbox": {
            "type": "boolean"
          },
          "input": {
            "type": "object"
          },
          "nlaInput": {
            "type": "string"
          },
          "authorizationData": {
            "type": "object"
          },
          "appSchema": {
            "type": "object"
          }
        },
        "type": "object",
        "required": [
          "actionName",
          "runInSandbox",
          "input"
        ]
      },
      "DirectExecuteReqDto": {
        "properties": {
          "endpoint": {
            "type": "string"
          },
          "base_url": {
            "type": "string"
          },
          "headers": {
            "type": "object"
          },
          "queryParams": {
            "type": "object"
          }
        },
        "type": "object",
        "required": [
          "endpoint",
          "base_url",
          "headers",
          "queryParams"
        ]
      },
      "ActionExecutionResDto": {
        "properties": {
          "response_data": {
            "type": "object"
          },
          "status": {
            "enum": [
              "success",
              "error"
            ],
            "type": "string"
          },
          "upstreamStatusCode": {
            "type": "number"
          }
        },
        "type": "object",
        "required": [
          "response_data",
          "status",
          "upstreamStatusCode"
        ]
      },
      "ActionExecutionReqDTO": {
        "properties": {
          "connectedAccountId": {
            "type": "string"
          },
          "appName": {
            "type": "string"
          },
          "entityId": {
            "type": "string"
          },
          "endpoint": {
            "type": "string"
          },
          "input": {
            "type": "object"
          },
          "text": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActionExecutionResDTO": {
        "properties": {
          "connectedAccountId": {
            "type": "string"
          },
          "appName": {
            "type": "string"
          },
          "entityId": {
            "type": "string"
          },
          "endpoint": {
            "type": "string"
          },
          "input": {
            "type": "object"
          },
          "text": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActionDetails": {
        "properties": {
          "appId": {
            "type": "string"
          },
          "appKey": {
            "type": "string"
          },
          "appName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "logo": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "parameters": {
            "type": "object"
          },
          "response": {
            "type": "object"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "appKey",
          "appName",
          "description",
          "displayName",
          "enabled",
          "logo",
          "name",
          "parameters",
          "response",
          "tags"
        ]
      },
      "ActionsListResponseDTO": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ActionDetails"
            },
            "type": "array"
          },
          "page": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          }
        },
        "type": "object",
        "required": [
          "items",
          "page",
          "totalPages"
        ]
      },
      "ExecuteActionResDTO": {
        "properties": {
          "response_data": {
            "type": "boolean",
            "description": "Indicates if the action was executed successfully"
          },
          "execution_details": {
            "type": "object",
            "description": "Details of the execution status"
          }
        },
        "type": "object",
        "required": [
          "response_data",
          "execution_details"
        ]
      },
      "ActionsQueryDTO": {
        "properties": {
          "appNames": {
            "type": "string",
            "description": "Names of the apps"
          },
          "useCase": {
            "type": "string",
            "description": "Use case"
          },
          "showEnabledOnly": {
            "type": "boolean",
            "description": "Show enabled only"
          },
          "limit": {
            "type": "number",
            "description": "Limit"
          },
          "apps": {
            "type": "string"
          },
          "actions": {
            "type": "string"
          },
          "tags": {
            "type": "string"
          },
          "usecaseLimit": {
            "type": "number"
          },
          "filterImportantActions": {
            "type": "boolean"
          },
          "showAll": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ActionsControllerV1": {
        "properties": {
          "getAction": {
            "items": {
              
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "getAction"
        ]
      },
      "ConnectionParams": {
        "properties": {
          "integrationId": {
            "type": "string"
          },
          "connectionParams": {
            "type": "object"
          },
          "isDisabled": {
            "type": "boolean"
          },
          "invocationCount": {
            "type": "number"
          },
          "id": {
            "type": "string"
          },
          "clientUniqueUserId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "data": {
            "type": "object"
          },
          "deleted": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "createdAt": {
            "oneOf": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date-time",
                "type": "string"
              }
            ]
          },
          "updatedAt": {
            "oneOf": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date-time",
                "type": "string"
              }
            ]
          },
          "appUniqueId": {
            "type": "string"
          },
          "appName": {
            "type": "string"
          },
          "logo": {
            "type": "string"
          },
          "authConfig": {
            "type": "object"
          }
        },
        "type": "object",
        "required": [
          "integrationId",
          "isDisabled",
          "invocationCount",
          "id",
          "status",
          "createdAt",
          "updatedAt",
          "appUniqueId",
          "appName"
        ]
      },
      "GetConnectionsResponseDto": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ConnectionParams"
            },
            "type": "array"
          },
          "totalPages": {
            "type": "number"
          },
          "page": {
            "type": "number"
          }
        },
        "type": "object",
        "required": [
          "items",
          "totalPages",
          "page"
        ]
      },
      "GetConnectionsQueryDto": {
        "properties": {
          "page": {
            "type": "number"
          },
          "pageSize": {
            "type": "number"
          },
          "appNames": {
            
          },
          "integrationId": {
            "type": "string"
          },
          "connectionId": {
            "type": "string"
          },
          "user_uuid": {
            "type": "string"
          },
          "showActiveOnly": {
            "type": "boolean"
          },
          "status": {
            "type": "string"
          },
          "showDisabled": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "InitiateConnectionPayloadDto": {
        "properties": {
          "data": {
            "type": "string",
            "minLength": 1
          },
          "integrationId": {
            "minLength": 1,
            "type": "string"
          },
          "redirectUri": {
            "type": "string"
          },
          "userUuid": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "integrationId"
        ]
      },
      "InitiateConnectionResponse": {
        "properties": {
          "connectionStatus": {
            "minLength": 1,
            "type": "string"
          },
          "connectedAccountId": {
            "minLength": 1,
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "connectionStatus",
          "connectedAccountId"
        ]
      },
      "OAuth2CallbackQueryDto": {
        "properties": {
          "state": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "state"
        ]
      },
      "RedirectUriDTO": {
        "properties": {
          "redirectUri": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "redirectUri"
        ]
      },
      "ListTriggersQueryDTO": {
        "properties": {
          "appNames": {
            "type": "string",
            "description": "Names of the apps"
          },
          "connectedAccountIds": {
            "type": "string",
            "description": "IDs of the connected accounts"
          },
          "triggerIds": {
            "type": "string",
            "description": "IDs of the triggers"
          },
          "showEnabledOnly": {
            "type": "boolean",
            "description": "Show enabled only"
          }
        },
        "type": "object"
      },
      "GetActiveTriggersQueryDTO": {
        "properties": {
          "connectedAccountIds": {
            "type": "string",
            "description": "IDs of the connected accounts"
          },
          "integrationIds": {
            "type": "string",
            "description": "IDs of the integrations"
          },
          "triggerIds": {
            "type": "string",
            "description": "IDs of the triggers"
          },
          "triggerNames": {
            "type": "string",
            "description": "Names of the triggers"
          },
          "page": {
            "type": "number",
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "description": "Limit per page"
          },
          "showDisabled": {
            "type": "boolean",
            "description": "Show disabled triggers"
          }
        },
        "type": "object"
      },
      "GetLogsQueryDTO": {
        "properties": {
          "connectionId": {
            "type": "string",
            "description": "ID of the connection"
          },
          "integrationId": {
            "type": "string",
            "description": "ID of the integration"
          },
          "page": {
            "type": "number",
            "description": "Page number"
          },
          "limit": {
            "type": "number",
            "description": "Limit per page"
          }
        },
        "type": "object"
      },
      "TriggerResDTO": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Trigger name"
          },
          "display_name": {
            "type": "string",
            "description": "Trigger display name"
          },
          "description": {
            "type": "string",
            "description": "Trigger description"
          },
          "enabled": {
            "type": "boolean",
            "description": "Is trigger enabled"
          },
          "config": {
            "type": "object",
            "description": "Trigger configuration"
          },
          "payload": {
            "type": "object",
            "description": "Trigger payload"
          },
          "logo": {
            "type": "string",
            "description": "Trigger logo URL"
          },
          "count": {
            "type": "number",
            "description": "Trigger count"
          },
          "appKey": {
            "type": "string",
            "description": "App key"
          },
          "appId": {
            "type": "string",
            "description": "App ID"
          },
          "appName": {
            "type": "string",
            "description": "App name"
          },
          "instructions": {
            "type": "string",
            "description": "Trigger instructions"
          },
          "type": {
            "type": "string",
            "description": "Trigger type"
          }
        },
        "type": "object",
        "required": [
          "name",
          "display_name",
          "appKey",
          "appId",
          "appName"
        ]
      },
      "TriggerConfig": {
        "properties": {
          "repo": {
            "type": "string",
            "description": "Repository name"
          },
          "owner": {
            "type": "string",
            "description": "Repository owner"
          }
        },
        "type": "object",
        "required": [
          "repo",
          "owner"
        ]
      },
      "ActiveTriggerInstance": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Trigger instance ID"
          },
          "connectionId": {
            "type": "string",
            "description": "Connected account ID"
          },
          "triggerName": {
            "type": "string",
            "description": "Trigger name"
          },
          "triggerData": {
            "type": "string",
            "description": "Trigger data"
          },
          "triggerConfig": {
            "$ref": "#/components/schemas/TriggerConfig",
            "description": "Trigger configuration"
          },
          "createdAt": {
            "type": "string",
            "description": "Created at timestamp",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "Updated at timestamp",
            "format": "date-time"
          },
          "disabledAt": {
            "type": "string",
            "description": "Disabled at timestamp",
            "format": "date-time",
            "nullable": true
          }
        },
        "type": "object",
        "required": [
          "connectionId",
          "triggerName",
          "triggerConfig",
          "createdAt",
          "updatedAt"
        ]
      },
      "PageInfoDTO": {
        "properties": {
          "currentPage": {
            "type": "number"
          },
          "perPage": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          }
        },
        "type": "object",
        "required": [
          "currentPage",
          "perPage",
          "totalPages"
        ]
      },
      "ActiveTriggersResDTO": {
        "properties": {
          "triggers": {
            "items": {
              
            },
            "type": "array"
          },
          "pageInfo": {
            "items": {
              "$ref": "#/components/schemas/PageInfoDTO"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "triggers",
          "pageInfo"
        ]
      },
      "TriggerLogsResDTO": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/TriggerLogItemDTO"
            },
            "type": "array"
          },
          "pageInfo": {
            "$ref": "#/components/schemas/PageInfoDTO"
          }
        },
        "type": "object",
        "required": [
          "data",
          "pageInfo"
        ]
      },
      "TriggerLogItemDTO": {
        "properties": {
          "clientId": {
            "type": "string",
            "description": "Client ID"
          },
          "connectionId": {
            "type": "string",
            "description": "Connection ID"
          },
          "errorTrigger": {
            "type": "string",
            "description": "Error trigger",
            "nullable": true
          },
          "triggerClientError": {
            "type": "string",
            "description": "Trigger client error",
            "nullable": true
          },
          "triggerClientPayload": {
            "type": "string",
            "description": "Trigger client payload",
            "nullable": true
          },
          "triggerProviderPayload": {
            "type": "string",
            "description": "Trigger provider payload",
            "nullable": true
          },
          "triggerName": {
            "type": "string",
            "description": "Trigger name",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Log ID"
          },
          "appKey": {
            "type": "string",
            "description": "App key"
          },
          "createdAt": {
            "type": "string",
            "description": "Created at timestamp",
            "format": "date-time"
          }
        },
        "type": "object",
        "required": [
          "clientId",
          "connectionId",
          "id",
          "appKey",
          "createdAt"
        ]
      },
      "HandleTriggerParamsDTO": {
        "properties": {
          "appName": {
            "type": "string",
            "description": "The name of the app"
          },
          "clientId": {
            "type": "string",
            "description": "The client ID"
          }
        },
        "type": "object",
        "required": [
          "appName",
          "clientId"
        ]
      },
      "HandleTriggerBodyDTO": {
        "properties": {
          "body": {
            "type": "object",
            "description": "The trigger payload"
          }
        },
        "type": "object",
        "required": [
          "body"
        ]
      },
      "EnableTriggerParamsDTO": {
        "properties": {
          "connectedAccountId": {
            "type": "string",
            "description": "The connected account ID"
          },
          "triggerName": {
            "type": "string",
            "description": "The trigger name"
          }
        },
        "type": "object",
        "required": [
          "connectedAccountId",
          "triggerName"
        ]
      },
      "GetTriggerParamsDTO": {
        "properties": {
          "triggerId": {
            "type": "string",
            "description": "The connected account ID"
          }
        },
        "type": "object",
        "required": [
          "triggerId"
        ]
      },
      "EnableTriggerBodyDTO": {
        "properties": {
          "triggerConfig": {
            "type": "object",
            "description": "The trigger configuration"
          }
        },
        "type": "object",
        "required": [
          "triggerConfig"
        ]
      },
      "SwitchTriggerStatusParamsDTO": {
        "properties": {
          "triggerId": {
            "type": "string",
            "description": "The trigger instance ID"
          }
        },
        "type": "object",
        "required": [
          "triggerId"
        ]
      },
      "SwitchTriggerStatusBodyDTO": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "The new enabled status of the trigger"
          }
        },
        "type": "object",
        "required": [
          "enabled"
        ]
      },
      "TriggerInstanceParamsDTO": {
        "properties": {
          "triggerInstanceId": {
            "type": "string",
            "description": "The trigger instance ID"
          }
        },
        "type": "object",
        "required": [
          "triggerInstanceId"
        ]
      },
      "SetCallbackUrlBodyDTO": {
        "properties": {
          "callbackURL": {
            "type": "string",
            "description": "The callback URL"
          }
        },
        "type": "object",
        "required": [
          "callbackURL"
        ]
      },
      "TriggerResponseDTO": {
        "properties": {
          "status": {
            "type": "string",
            "description": "The status of the operation"
          },
          "message": {
            "type": "string",
            "description": "Optional message"
          },
          "triggerId": {
            "type": "string",
            "description": "Optional trigger ID"
          }
        },
        "type": "object",
        "required": [
          "status"
        ]
      },
      "WebhookURLResponseDTO": {
        "properties": {
          "status": {
            "type": "string",
            "description": "The status of the operation"
          },
          "callbackURL": {
            "type": "string",
            "description": "The callback URL if found"
          }
        },
        "type": "object",
        "required": [
          "status"
        ]
      },
      "GenerateCLISessionReqDTO": {
        "properties": {
          "channel_name": {
            "type": "string",
            "description": "The channel name for the CLI session"
          }
        },
        "type": "object",
        "required": [
          "channel_name"
        ]
      },
      "LoginAccountAsAdminReqDTO": {
        "properties": {
          "email": {
            "type": "string",
            "description": "Email of the client"
          },
          "apiKey": {
            "type": "string",
            "description": "API Key of the client"
          },
          "adminToken": {
            "type": "string",
            "description": "Admin token"
          }
        },
        "type": "object",
        "required": [
          "adminToken"
        ]
      },
      "GenerateCLISessionResDTO": {
        "properties": {
          "key": {
            "type": "string",
            "description": "The key for the CLI session"
          }
        },
        "type": "object",
        "required": [
          "key"
        ]
      },
      "GetCLISessionResDTO": {
        "properties": {
          "clientId": {
            "type": "string",
            "description": "The client ID"
          },
          "cliCode": {
            "type": "string",
            "description": "The CLI code"
          }
        },
        "type": "object",
        "required": [
          "clientId",
          "cliCode"
        ]
      },
      "VerifyCLICodeResDTO": {
        "properties": {
          "clientId": {
            "type": "string",
            "description": "The client ID"
          },
          "cliCode": {
            "type": "string",
            "description": "The CLI code"
          },
          "apiKey": {
            "type": "string",
            "description": "The API key associated with the client"
          }
        },
        "type": "object",
        "required": [
          "clientId",
          "cliCode",
          "apiKey"
        ]
      },
      "CLIQueryDTO": {
        "properties": {
          "key": {
            "type": "string",
            "description": "Unique key for CLI session"
          },
          "code": {
            "type": "string",
            "description": "Code for CLI verification"
          }
        },
        "type": "object",
        "required": [
          "key"
        ]
      },
      "MetadataReqDTO": {
        "properties": {
          "email": {
            "type": "string",
            "description": "The email associated with the metadata request"
          },
          "metadata": {
            "description": "Additional metadata as a key-value pair"
          }
        },
        "type": "object",
        "required": [
          "email"
        ]
      },
      "TriggersEnabledToggleReqDTO": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Flag to enable or disable triggers"
          }
        },
        "type": "object",
        "required": [
          "enabled"
        ]
      },
      "TriggersEnabledToggleResDTO": {
        "properties": {
          "message": {
            "type": "string",
            "description": "Message indicating the result of the toggle operation"
          }
        },
        "type": "object",
        "required": [
          "message"
        ]
      },
      "MetadataQueryDTO": {
        "properties": {
          "email": {
            "type": "string",
            "description": "Email of the client"
          }
        },
        "type": "object",
        "required": [
          "email"
        ]
      },
      "TriggerMetadata": {
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique id of the log"
          },
          "type": {
            "type": "string",
            "description": "The type of the log",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "trigger"
                ]
              }
            ]
          },
          "createdAt": {
            "pattern": "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
            "type": "string",
            "description": "The date and time when the log was created",
            "format": "date-time"
          },
          "updatedAt": {
            "pattern": "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
            "type": "string",
            "description": "The date and time when the log was updated",
            "format": "date-time"
          },
          "provider": {
            "type": "string",
            "description": "The provider of the log"
          },
          "clientId": {
            "type": "string",
            "description": "The client uuid of the log"
          },
          "connectionId": {
            "type": "string",
            "description": "The connection id of the log"
          },
          "triggerProviderPayload": {
            "type": "string",
            "description": "The trigger provider payload of the log"
          },
          "triggerClientPayload": {
            "type": "string"
          },
          "triggerClientError": {
            "type": "string",
            "description": "The trigger client error of the log"
          },
          "triggerName": {
            "type": "string",
            "description": "The trigger name of the log"
          },
          "triggerClientResponse": {
            "type": "string",
            "description": "The trigger client response of the log"
          }
        },
        "type": "object",
        "required": [
          "id",
          "type",
          "createdAt",
          "updatedAt",
          "provider",
          "clientId",
          "connectionId"
        ]
      },
      "ActionMetadata": {
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique id of the log"
          },
          "request": {
            "type": "string",
            "description": "The request sent to the provider"
          },
          "response": {
            "type": "string",
            "description": "The response from the provider"
          },
          "errorRequest": {
            "type": "string",
            "description": "The error request sent to the provider"
          },
          "type": {
            "type": "string",
            "description": "The type of the log",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "action"
                ]
              }
            ]
          },
          "createdAt": {
            "pattern": "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
            "type": "string",
            "description": "The date and time when the log was created",
            "format": "date-time"
          },
          "updatedAt": {
            "pattern": "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
            "type": "string",
            "description": "The date and time when the log was updated",
            "format": "date-time"
          },
          "provider": {
            "type": "string",
            "description": "The provider of the log"
          },
          "clientId": {
            "type": "string",
            "description": "The client uuid of the log"
          },
          "connectionId": {
            "type": "string",
            "description": "The connection id of the log"
          },
          "actionName": {
            "type": "string",
            "description": "The action name of the log"
          }
        },
        "type": "object",
        "required": [
          "id",
          "request",
          "type",
          "createdAt",
          "updatedAt",
          "provider",
          "clientId",
          "connectionId",
          "actionName"
        ]
      },
      "TriggerLogData": {
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the trigger log"
          },
          "connectionId": {
            "type": "string",
            "description": "The connection identifier associated with the trigger log"
          },
          "clientId": {
            "type": "string",
            "description": "The client identifier associated with the trigger log"
          },
          "status": {
            "type": "string",
            "description": "The status of the trigger log"
          },
          "appName": {
            "type": "string",
            "description": "The name of the application associated with the trigger log"
          },
          "createdAt": {
            "pattern": "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
            "type": "string",
            "description": "The creation date and time of the trigger log",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "description": "The type of the log",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "trigger"
                ]
              }
            ]
          },
          "meta": {
            "$ref": "#/components/schemas/TriggerMetadata",
            "description": "Metadata associated with the trigger log"
          }
        },
        "type": "object",
        "required": [
          "id",
          "connectionId",
          "clientId",
          "status",
          "appName",
          "createdAt",
          "type",
          "meta"
        ]
      },
      "ActionLogData": {
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the action log"
          },
          "connectionId": {
            "type": "string",
            "description": "The connection identifier associated with the action log"
          },
          "clientId": {
            "type": "string",
            "description": "The client identifier associated with the action log"
          },
          "status": {
            "type": "string",
            "description": "The status of the action log"
          },
          "appName": {
            "type": "string",
            "description": "The name of the application associated with the action log"
          },
          "createdAt": {
            "pattern": "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
            "type": "string",
            "description": "The creation date and time of the action log",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "description": "The type of the log",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "action"
                ]
              }
            ]
          },
          "meta": {
            "$ref": "#/components/schemas/ActionMetadata",
            "description": "Metadata associated with the action log"
          }
        },
        "type": "object",
        "required": [
          "id",
          "connectionId",
          "clientId",
          "status",
          "appName",
          "createdAt",
          "type",
          "meta"
        ]
      },
      "LogsResDTO": {
        "properties": {
          "nextCursor": {
            "type": "string",
            "description": "The cursor to get the next page of logs"
          },
          "data": {
            "items": {
              
            },
            "type": "array",
            "description": "Logs data"
          }
        },
        "type": "object",
        "required": [
          "data"
        ]
      },
      "GetLogsDTO": {
        "properties": {
          "type": {
            "enum": [
              "error",
              "info",
              "debug"
            ],
            "type": "string",
            "description": "Type of the log"
          },
          "time": {
            "enum": [
              "30m",
              "6h",
              "1d",
              "1w",
              "1month",
              "1y"
            ],
            "type": "string",
            "description": "Time interval for which data needs to be fetched"
          },
          "status": {
            "enum": [
              "pending",
              "processed",
              "failed"
            ],
            "type": "string",
            "description": "Status of the log"
          },
          "search": {
            "type": "string",
            "description": "Search term in the log"
          },
          "integrationId": {
            "type": "string",
            "description": "Integration UUID"
          },
          "limit": {
            "type": "number",
            "description": "Limit of the logs",
            "default": 10
          },
          "cursor": {
            "type": "string",
            "description": "Cursor for pagination"
          },
          "connectionId": {
            "type": "string",
            "description": "Connection ID of the log"
          }
        },
        "type": "object"
      }
    }
  },
  "info": {
    "title": "Composio OpenAPI",
    "version": "1.0.0",
    "description": "Generated with `routing-controllers-openapi`"
  },
  "openapi": "3.0.0",
  "paths": {
    "/api/v1/client/auth/identify": {
      "post": {
        "operationId": "ClientAuthController.identifyClient",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentifyClientReqDTO"
              }
            }
          },
          "description": "IdentifyClientReqDTO",
          "required": false
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentifyClientResDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Identify client",
        "tags": [
          "Client Auth"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/client/auth/google_login": {
      "post": {
        "operationId": "ClientAuthController.googleLogin",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                
              }
            }
          },
          "description": "",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Google login",
        "tags": [
          "Client Auth"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/client/auth/track": {
      "post": {
        "operationId": "ClientAuthController.trackClient",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TrackClientReqDTO"
              }
            }
          },
          "description": "TrackClientReqDTO",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrackClientResDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Track client",
        "tags": [
          "Client Auth"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/client/auth/send_magic_link": {
      "post": {
        "operationId": "ClientAuthController.sendMagicLink",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MagicLinkReqDTO"
              }
            }
          },
          "description": "MagicLinkReqDTO",
          "required": false
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MagicLinkResDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Send magic link",
        "tags": [
          "Client Auth"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/client/auth/logout": {
      "post": {
        "operationId": "ClientAuthController.logout",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Logout API",
        "tags": [
          "Client Auth"
        ],
        "description": "Logout the user and clear the server side session"
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/client/auth/verify_magic_link": {
      "post": {
        "operationId": "ClientAuthController.verifyMagicLink",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyMagicLinkReqDTO"
              }
            }
          },
          "description": "VerifyMagicLinkReqDTO",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyMagicLinkResDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Verify magic link",
        "tags": [
          "Client Auth"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/client/auth/client_info": {
      "get": {
        "operationId": "ClientAuthController.getUserInfo",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get user info",
        "tags": [
          "Client Auth"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/client/auth/pusher_auth": {
      "post": {
        "operationId": "ClientAuthController.pusherUserAuth",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                
              }
            }
          },
          "description": "",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Pusher user auth",
        "tags": [
          "Client Auth"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/client/auth/delete/{clientId}": {
      "delete": {
        "operationId": "ClientAuthController.deleteClient",
        "parameters": [
          {
            "in": "path",
            "name": "clientId",
            "required": true,
            "schema": {
              "pattern": "[^\\/#\\?]+?",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Delete client",
        "tags": [
          "Client Auth"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/team/invite": {
      "post": {
        "operationId": "TeamController.inviteMember",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteMemberReqDTO"
              }
            }
          },
          "description": "InviteMemberReqDTO",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/MemberResDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Invite member",
        "tags": [
          "Team"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/team/members": {
      "get": {
        "operationId": "TeamController.listMembers",
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/MemberResDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "List members",
        "tags": [
          "Team"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/team/members/{id}": {
      "delete": {
        "operationId": "TeamController.removeMember",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "pattern": "[^\\/#\\?]+?",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Remove member",
        "tags": [
          "Team"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/api_keys": {
      "post": {
        "operationId": "APIKeysController.generateAPIKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateAPIKeyReqDTO"
              }
            }
          },
          "description": "GenerateAPIKeyReqDTO",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/APIKeyResDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Generate api key",
        "tags": [
          "API Keys"
        ]
      },
      "get": {
        "operationId": "APIKeysController.listAPIKeys",
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/APIKeyResDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "List api keys",
        "tags": [
          "API Keys"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/api_keys/{id}": {
      "delete": {
        "operationId": "APIKeysController.deleteAPIKey",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "pattern": "[^\\/#\\?]+?",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "text/html; charset=utf-8": {
                
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Delete api key",
        "tags": [
          "API Keys"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/apps": {
      "get": {
        "operationId": "AppController.getApps",
        "parameters": [
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string",
              "description": "Category of the app"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppListResDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get apps",
        "tags": [
          "App"
        ],
        "description": "Retrieve a list of all applications based on query parameters."
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/apps/openapi/spec/add": {
      "post": {
        "operationId": "AppController.addOpenAPISpec",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddToolsRequestDTO"
              }
            }
          },
          "description": "AddToolsRequestDTO",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Add open api spec",
        "tags": [
          "App"
        ],
        "description": "Add openapi spec tool"
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/apps/openapi/spec/list": {
      "get": {
        "operationId": "AppController.getOpenaAPISpecs",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AppListResDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of all openapi spec tools"
          }
        },
        "summary": "Get opena api specs",
        "tags": [
          "App"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/apps/openapi/spec/delete/{name}": {
      "delete": {
        "operationId": "AppController.deleteOpenAPISpecTool",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "pattern": "[^\\/#\\?]+?",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Delete open api spec tool",
        "tags": [
          "App"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/apps/openapi/spec/logs/{name}": {
      "get": {
        "operationId": "AppController.getOpenAPISpecLogs",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "pattern": "[^\\/#\\?]+?",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get open api spec logs",
        "tags": [
          "App"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/apps/custom-repo/add-repo": {
      "post": {
        "operationId": "AppController.addCustomRepo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddRepoURLReqDTO"
              }
            }
          },
          "description": "AddRepoURLReqDTO",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Add custom repo",
        "tags": [
          "App"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/apps/{appName}": {
      "get": {
        "operationId": "AppController.getApp",
        "parameters": [
          {
            "in": "path",
            "name": "appName",
            "required": true,
            "schema": {
              "pattern": "[^\\/#\\?]+?",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleAppInfoResDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get app",
        "tags": [
          "App"
        ],
        "description": "Get app details"
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/apps/sync": {
      "post": {
        "operationId": "AppController.syncApps",
        "responses": {
          "202": {
            "content": {
              "application/json": {
                
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Sync apps",
        "tags": [
          "App"
        ],
        "description": "Sync custom repo"
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/apps/custom-repo/get-repo": {
      "get": {
        "operationId": "AppController.getCustomRepo",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get custom repo",
        "tags": [
          "App"
        ],
        "description": "Get custom repo"
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/integrations": {
      "post": {
        "operationId": "AppConnectorController.createConnector",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConnectorPayloadDTO"
              }
            }
          },
          "description": "CreateConnectorPayloadDTO",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/GetConnectorInfoResDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Create connector",
        "tags": [
          "App Connector"
        ]
      },
      "get": {
        "operationId": "AppConnectorController.listGlobalConnectors",
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/GetConnectorListResDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "List global connectors",
        "tags": [
          "App Connector"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/integrations/{integrationId}": {
      "get": {
        "operationId": "AppConnectorController.getConnectorInfo",
        "parameters": [
          {
            "in": "path",
            "name": "integrationId",
            "required": true,
            "schema": {
              "pattern": "[^\\/#\\?]+?",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/GetConnectorInfoResDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get connector info",
        "tags": [
          "App Connector"
        ]
      },
      "patch": {
        "operationId": "AppConnectorController.patchConnector",
        "parameters": [
          {
            "in": "path",
            "name": "integrationId",
            "required": true,
            "schema": {
              "pattern": "[^\\/#\\?]+?",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchConnectorReqDTO"
              }
            }
          },
          "description": "PatchConnectorReqDTO",
          "required": false
        },
        "responses": {
          "204": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/PatchConnectorResDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Patch connector",
        "tags": [
          "App Connector"
        ]
      },
      "delete": {
        "operationId": "AppConnectorController.deleteConnector",
        "parameters": [
          {
            "in": "path",
            "name": "integrationId",
            "required": true,
            "schema": {
              "pattern": "[^\\/#\\?]+?",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteRowAPIDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete connector",
        "tags": [
          "App Connector"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/integrations/{integrationId}/status": {
      "post": {
        "operationId": "AppConnectorController.patchPostConnector",
        "parameters": [
          {
            "in": "path",
            "name": "integrationId",
            "required": true,
            "schema": {
              "pattern": "[^\\/#\\?]+?",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchConnectorReqDTO"
              }
            }
          },
          "description": "PatchConnectorReqDTO",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/PatchConnectorResDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Patch post connector",
        "tags": [
          "App Connector"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/actions": {
      "get": {
        "operationId": "ActionsControllerV1.listActions",
        "parameters": [
          {
            "in": "query",
            "name": "appNames",
            "schema": {
              "type": "string",
              "description": "Names of the apps"
            }
          },
          {
            "in": "query",
            "name": "useCase",
            "schema": {
              "type": "string",
              "description": "Use case"
            }
          },
          {
            "in": "query",
            "name": "showEnabledOnly",
            "schema": {
              "type": "boolean",
              "description": "Show enabled only"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number",
              "description": "Limit"
            }
          },
          {
            "in": "query",
            "name": "apps",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "actions",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "usecaseLimit",
            "schema": {
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "filterImportantActions",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "showAll",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ActionsListResponseDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "List actions",
        "tags": [
          "Actions Controller V 1"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/actions/{actionId}/execute": {
      "post": {
        "operationId": "ActionsControllerV1.executeAction",
        "parameters": [
          {
            "in": "path",
            "name": "actionId",
            "required": true,
            "schema": {
              "pattern": "[^\\/#\\?]+?",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionExecutionReqDTO"
              }
            }
          },
          "description": "ActionExecutionReqDTO",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ExecuteActionResDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Execute action",
        "tags": [
          "Actions Controller V 1"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/actions/proxy": {
      "post": {
        "operationId": "ActionsControllerV1.executeActionProxy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionExecutionReqDTO"
              }
            }
          },
          "description": "ActionExecutionReqDTO",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ExecuteActionResDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Execute action proxy",
        "tags": [
          "Actions Controller V 1"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/actions/{actionId}": {
      "get": {
        "operationId": "ActionsControllerV1.getAction",
        "parameters": [
          {
            "in": "path",
            "name": "actionId",
            "required": true,
            "schema": {
              "pattern": "[^\\/#\\?]+?",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ActionDetails"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get action",
        "tags": [
          "Actions Controller V 1"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/connectedAccounts": {
      "get": {
        "operationId": "ConnectionsController.getConnections",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "appNames",
            "schema": {
              
            }
          },
          {
            "in": "query",
            "name": "integrationId",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "connectionId",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "user_uuid",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "showActiveOnly",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "showDisabled",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetConnectionsResponseDto"
                }
              }
            },
            "description": "Get all connections for the current user"
          }
        },
        "summary": "Get connections",
        "tags": [
          "Connections"
        ]
      },
      "post": {
        "operationId": "ConnectionsController.initiateConnection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiateConnectionPayloadDto"
              }
            }
          },
          "description": "InitiateConnectionPayloadDto",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InitiateConnectionResponse"
                }
              }
            },
            "description": "Initiates a connection for the given integration and mark the connection status as initiated if the auth scheme is OAuth1 or OAuth2"
          }
        },
        "summary": "Initiate connection",
        "tags": [
          "Connections"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/connectedAccounts/{connectedAccountId}": {
      "get": {
        "operationId": "ConnectionsController.getConnection",
        "parameters": [
          {
            "in": "path",
            "name": "connectedAccountId",
            "required": true,
            "schema": {
              "pattern": "[^\\/#\\?]+?",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get connection",
        "tags": [
          "Connections"
        ]
      },
      "delete": {
        "operationId": "ConnectionsController.deleteConnection",
        "parameters": [
          {
            "in": "path",
            "name": "connectedAccountId",
            "required": true,
            "schema": {
              "pattern": "[^\\/#\\?]+?",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Delete connection",
        "tags": [
          "Connections"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/connectedAccounts/{connectedAccountId}/disable": {
      "post": {
        "operationId": "ConnectionsController.disableConnection",
        "parameters": [
          {
            "in": "path",
            "name": "connectedAccountId",
            "required": true,
            "schema": {
              "pattern": "[^\\/#\\?]+?",
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Disable connection",
        "tags": [
          "Connections"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/connectedAccounts/{connectedAccountId}/enable": {
      "post": {
        "operationId": "ConnectionsController.enableConnection",
        "parameters": [
          {
            "in": "path",
            "name": "connectedAccountId",
            "required": true,
            "schema": {
              "pattern": "[^\\/#\\?]+?",
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Enable connection",
        "tags": [
          "Connections"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/login/{appName}/auth": {
      "get": {
        "operationId": "AppLoginController.handleOAuth2Callback",
        "parameters": [
          {
            "in": "path",
            "name": "appName",
            "required": true,
            "schema": {
              "pattern": "[^\\/#\\?]+?",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "redirectUri",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Handle o auth 2 callback",
        "tags": [
          "App Login"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/login/{appName}/callback": {
      "get": {
        "operationId": "AppLoginController.verifyOAuth2Login",
        "parameters": [
          {
            "in": "path",
            "name": "appName",
            "required": true,
            "schema": {
              "pattern": "[^\\/#\\?]+?",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Verify o auth 2 login",
        "tags": [
          "App Login"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/triggers": {
      "get": {
        "operationId": "TriggersController.listTriggers",
        "parameters": [
          {
            "in": "query",
            "name": "appNames",
            "schema": {
              "type": "string",
              "description": "Names of the apps"
            }
          },
          {
            "in": "query",
            "name": "connectedAccountIds",
            "schema": {
              "type": "string",
              "description": "IDs of the connected accounts"
            }
          },
          {
            "in": "query",
            "name": "triggerIds",
            "schema": {
              "type": "string",
              "description": "IDs of the triggers"
            }
          },
          {
            "in": "query",
            "name": "showEnabledOnly",
            "schema": {
              "type": "boolean",
              "description": "Show enabled only"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TriggerResDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "List triggers",
        "tags": [
          "Triggers"
        ],
        "description": "List triggers"
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/triggers/handle/{appName}/{clientId}": {
      "post": {
        "operationId": "TriggersController.handleTrigger",
        "parameters": [
          {
            "in": "header",
            "name": "",
            "required": false,
            "schema": {
              
            }
          },
          {
            "in": "path",
            "name": "appName",
            "required": true,
            "schema": {
              "pattern": "[^\\/#\\?]+?",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "clientId",
            "required": true,
            "schema": {
              "pattern": "[^\\/#\\?]+?",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                
              }
            }
          },
          "description": "",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Handle trigger",
        "tags": [
          "Triggers"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/triggers/enable/{connectedAccountId}/{triggerName}": {
      "post": {
        "operationId": "TriggersController.enableTrigger",
        "parameters": [
          {
            "in": "path",
            "name": "connectedAccountId",
            "required": true,
            "schema": {
              "pattern": "[^\\/#\\?]+?",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "triggerName",
            "required": true,
            "schema": {
              "pattern": "[^\\/#\\?]+?",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableTriggerBodyDTO"
              }
            }
          },
          "description": "EnableTriggerBodyDTO",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/TriggerResponseDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Enable trigger",
        "tags": [
          "Triggers"
        ],
        "description": "Enables a trigger for a connected account and specific trigger name."
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/triggers/get/{triggerId}": {
      "get": {
        "operationId": "TriggersController.getTrigger",
        "parameters": [
          {
            "in": "path",
            "name": "triggerId",
            "required": true,
            "schema": {
              "pattern": "[^\\/#\\?]+?",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get trigger",
        "tags": [
          "Triggers"
        ],
        "description": "Retrieves a specific trigger by its ID."
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/triggers/active_triggers": {
      "get": {
        "operationId": "TriggersController.getActiveTriggers",
        "parameters": [
          {
            "in": "query",
            "name": "connectedAccountIds",
            "schema": {
              "type": "string",
              "description": "IDs of the connected accounts"
            }
          },
          {
            "in": "query",
            "name": "integrationIds",
            "schema": {
              "type": "string",
              "description": "IDs of the integrations"
            }
          },
          {
            "in": "query",
            "name": "triggerIds",
            "schema": {
              "type": "string",
              "description": "IDs of the triggers"
            }
          },
          {
            "in": "query",
            "name": "triggerNames",
            "schema": {
              "type": "string",
              "description": "Names of the triggers"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "description": "Page number"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number",
              "description": "Limit per page"
            }
          },
          {
            "in": "query",
            "name": "showDisabled",
            "schema": {
              "type": "boolean",
              "description": "Show disabled triggers"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveTriggersResDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get active triggers",
        "tags": [
          "Triggers"
        ],
        "description": "Lists active triggers based on query parameters."
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/triggers/instance/{triggerId}/status": {
      "patch": {
        "operationId": "TriggersController.switchTriggerInstanceStatus",
        "parameters": [
          {
            "in": "path",
            "name": "triggerId",
            "required": true,
            "schema": {
              "pattern": "[^\\/#\\?]+?",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SwitchTriggerStatusBodyDTO"
              }
            }
          },
          "description": "SwitchTriggerStatusBodyDTO",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/TriggerResponseDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Switch trigger instance status",
        "tags": [
          "Triggers"
        ],
        "description": "Switches the status of a trigger instance."
      },
      "post": {
        "operationId": "TriggersController.switchPostTriggerInstanceStatus",
        "parameters": [
          {
            "in": "path",
            "name": "triggerId",
            "required": true,
            "schema": {
              "pattern": "[^\\/#\\?]+?",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SwitchTriggerStatusBodyDTO"
              }
            }
          },
          "description": "SwitchTriggerStatusBodyDTO",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/TriggerResponseDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Switch post trigger instance status",
        "tags": [
          "Triggers"
        ],
        "description": "Switches the status of a trigger instance."
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/triggers/disable/{triggerInstanceId}": {
      "post": {
        "operationId": "TriggersController.disableTrigger",
        "parameters": [
          {
            "in": "path",
            "name": "triggerInstanceId",
            "required": true,
            "schema": {
              "pattern": "[^\\/#\\?]+?",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/TriggerResponseDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Disable trigger",
        "tags": [
          "Triggers"
        ],
        "description": "Disables a specified trigger instance."
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/triggers/instance/{triggerInstanceId}": {
      "delete": {
        "operationId": "TriggersController.deleteTrigger",
        "parameters": [
          {
            "in": "path",
            "name": "triggerInstanceId",
            "required": true,
            "schema": {
              "pattern": "[^\\/#\\?]+?",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteRowAPIDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Delete trigger",
        "tags": [
          "Triggers"
        ],
        "description": "Deletes a specified trigger instance."
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/triggers/setCallbackURL": {
      "post": {
        "operationId": "TriggersController.setCallbackUrl",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                
              }
            }
          },
          "description": "",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Set callback url",
        "tags": [
          "Triggers"
        ],
        "description": "Sets a universal callback URL for the client."
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/triggers/set_callback_url": {
      "post": {
        "operationId": "TriggersController.set_callback_url",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetCallbackUrlBodyDTO"
              }
            }
          },
          "description": "SetCallbackUrlBodyDTO",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/TriggerResponseDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Set callback url",
        "tags": [
          "Triggers"
        ],
        "description": "Sets a universal callback URL for the client."
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/triggers/callback_url": {
      "get": {
        "operationId": "TriggersController.getWebhookURL",
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookURLResponseDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get webhook url",
        "tags": [
          "Triggers"
        ],
        "description": "Retrieves the universal callback URL set for the client."
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/triggers/logs": {
      "get": {
        "operationId": "TriggersController.getLogs",
        "parameters": [
          {
            "in": "query",
            "name": "connectionId",
            "schema": {
              "type": "string",
              "description": "ID of the connection"
            }
          },
          {
            "in": "query",
            "name": "integrationId",
            "schema": {
              "type": "string",
              "description": "ID of the integration"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "description": "Page number"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number",
              "description": "Limit per page"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/TriggerLogsResDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get logs",
        "tags": [
          "Triggers"
        ],
        "description": "Fetches logs based on connection and integration details."
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/triggers/pusher": {
      "post": {
        "operationId": "TriggersController.handlePusherEvents",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                
              }
            }
          },
          "description": "",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Handle pusher events",
        "tags": [
          "Triggers"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/cli/sentry-dns": {
      "get": {
        "operationId": "AdminController.sentryDns",
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Sentry dns",
        "tags": [
          "Admin"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/cli/generate-cli-session": {
      "get": {
        "operationId": "CLIController.handleCLICodeExchange",
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateCLISessionResDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Handle cli code exchange",
        "tags": [
          "CLI"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/cli/get-cli-code": {
      "get": {
        "operationId": "CLIController.getCLICode",
        "parameters": [
          {
            "in": "query",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique key for CLI session"
            }
          },
          {
            "in": "query",
            "name": "code",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Code for CLI verification"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/GetCLISessionResDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get cli code",
        "tags": [
          "CLI"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/cli/verify-cli-code": {
      "get": {
        "operationId": "CLIController.handleCLICodeVerification",
        "parameters": [
          {
            "in": "query",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique key for CLI session"
            }
          },
          {
            "in": "query",
            "name": "code",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Code for CLI verification"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyCLICodeResDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Handle cli code verification",
        "tags": [
          "CLI"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/metadata": {
      "get": {
        "operationId": "MetadataController.getMetadata",
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Email of the client"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get metadata",
        "tags": [
          "Metadata"
        ]
      },
      "post": {
        "operationId": "MetadataController.updateMetadata",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataReqDTO"
              }
            }
          },
          "description": "MetadataReqDTO",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Update metadata",
        "tags": [
          "Metadata"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/metadata/toggle/trigger": {
      "post": {
        "operationId": "MetadataController.toggleTriggerState",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TriggersEnabledToggleReqDTO"
              }
            }
          },
          "description": "TriggersEnabledToggleReqDTO",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Toggle trigger state",
        "tags": [
          "Metadata"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/metadata/toggle.info": {
      "get": {
        "operationId": "MetadataController.getToggleInfo",
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                
              }
            },
            "description": "Successful response"
          }
        },
        "summary": "Get toggle info",
        "tags": [
          "Metadata"
        ]
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/logs/": {
      "get": {
        "operationId": "LogsController.getLogs",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "error",
                "info",
                "debug"
              ],
              "type": "string",
              "description": "Type of the log"
            }
          },
          {
            "in": "query",
            "name": "time",
            "schema": {
              "enum": [
                "30m",
                "6h",
                "1d",
                "1w",
                "1month",
                "1y"
              ],
              "type": "string",
              "description": "Time interval for which data needs to be fetched"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "enum": [
                "pending",
                "processed",
                "failed"
              ],
              "type": "string",
              "description": "Status of the log"
            }
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string",
              "description": "Search term in the log"
            }
          },
          {
            "in": "query",
            "name": "integrationId",
            "schema": {
              "type": "string",
              "description": "Integration UUID"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number",
              "description": "Limit of the logs",
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "cursor",
            "schema": {
              "type": "string",
              "description": "Cursor for pagination"
            }
          },
          {
            "in": "query",
            "name": "connectionId",
            "schema": {
              "type": "string",
              "description": "Connection ID of the log"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/LogsResDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Get logs",
        "tags": [
          "Logs"
        ],
        "description": "List logs"
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/actions": {
      "get": {
        "operationId": "ActionsControllerV2.listActions",
        "parameters": [
          {
            "in": "query",
            "name": "appNames",
            "schema": {
              "type": "string",
              "description": "Names of the apps"
            }
          },
          {
            "in": "query",
            "name": "useCase",
            "schema": {
              "type": "string",
              "description": "Use case"
            }
          },
          {
            "in": "query",
            "name": "showEnabledOnly",
            "schema": {
              "type": "boolean",
              "description": "Show enabled only"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "number",
              "description": "Limit"
            }
          },
          {
            "in": "query",
            "name": "apps",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "actions",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "usecaseLimit",
            "schema": {
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "filterImportantActions",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "showAll",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ActionsListResponseDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "List actions",
        "tags": [
          "Actions Controller V 2"
        ],
        "description": "Retrieve a list of all actions based on query parameters."
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/actions/{actionId}/execute": {
      "post": {
        "operationId": "ActionsControllerV2.executeAction",
        "parameters": [
          {
            "in": "path",
            "name": "actionId",
            "required": true,
            "schema": {
              "pattern": "[^\\/#\\?]+?",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionExecutionReqDTO"
              }
            }
          },
          "description": "ActionExecutionReqDTO",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ExecuteActionResDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Execute action",
        "tags": [
          "Actions Controller V 2"
        ],
        "description": "Execute an action. Support both connected account and no auth auth."
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v2/actions/proxy": {
      "post": {
        "operationId": "ActionsControllerV2.executeActionProxy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionExecutionReqDTO"
              }
            }
          },
          "description": "ActionExecutionReqDTO",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ExecuteActionResDTO"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Execute action proxy",
        "tags": [
          "Actions Controller V 2"
        ],
        "description": "Execute an action with direct auth."
      },
      "parameters": [
        {
          "name": "X-API-Key",
          "in": "header",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    }
  },
  "servers": [
    {
      "url": "https://backend.composio.dev"
    }
  ]
}