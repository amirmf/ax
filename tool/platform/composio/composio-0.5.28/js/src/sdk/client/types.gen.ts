// This file is auto-generated by @hey-api/openapi-ts

export type MagicLinkResDTO = {
    status: string;
};

export type MagicLinkReqDTO = {
    /**
     * The email of the user
     */
    email: string;
    /**
     * The frontend host of the user
     */
    verifyHost: string;
};

export type LogoutResDTO = {
    /**
     * Message confirming the logout
     */
    message: string;
};

export type VerifyMagicLinkReqDTO = {
    /**
     * The magic link token
     */
    token: string;
};

export type VerifyMagicLinkDataDTO = {
    clientId: string;
    isValid: boolean;
    jwtToken: string;
    email: string;
};

export type VerifyMagicLinkResDTO = {
    /**
     * Message indicating the result of the verification
     */
    message: string;
    /**
     * Data containing client and token information if verification is successful
     */
    data?: VerifyMagicLinkDataDTO;
};

export type IdentifyClientReqDTO = {
    /**
     * The hash of the client
     */
    hash: string;
    /**
     * The framework used by the client
     */
    framework?: string;
};

export type IdentifyClientResDTO = {
    /**
     * The client ID
     */
    clientId: string;
    /**
     * The API key associated with the client
     */
    apiKey: string;
};

export type UserGitUserInfo = {
    name?: string;
    email: string;
};

export type TrackClientReqDTO = {
    /**
     * The framework used by the client
     */
    framework: string;
    /**
     * The MAC address of the client device
     */
    mac_address?: string;
    /**
     * User Git information
     */
    user_git_user_info?: UserGitUserInfo;
};

export type TrackClientResDTO = {
    /**
     * Message indicating the result of the tracking operation
     */
    message: string;
};

export type DeleteRowAPIDTO = {
    /**
     * Status of the delete operation
     */
    status: string;
    /**
     * Number of records deleted
     */
    count: number;
};

export type InviteMemberReqDTO = {
    /**
     * The email of the member
     */
    email: string;
    /**
     * The name of the member
     */
    name: string;
    /**
     * The host to verify the member
     */
    verifyHost: string;
};

export type MemberResDTO = {
    /**
     * The email of the member
     */
    email: string;
    /**
     * The uuid identifier for the member
     */
    id: string;
    /**
     * The name of the member
     */
    name: string;
    /**
     * The creation date of the member record
     */
    createdAt?: string;
    /**
     * The last update date of the member record
     */
    updatedAt?: string;
};

export type GenerateAPIKeyReqDTO = {
    /**
     * The name of the API key to be generated
     */
    name: string;
};

export type APIKeyResDTO = {
    /**
     * The ID of the API key
     */
    id: string;
    /**
     * The name of the API key
     */
    name: string;
    /**
     * The creation date of the API key
     */
    createdAt: string;
    /**
     * The last update date of the API key
     */
    updatedAt: string;
    /**
     * The generated API key
     */
    key: string;
};

export type DeleteAPIKeyReqDTO = {
    /**
     * The ID of the API key to be deleted
     */
    id: string;
};

export type SingleAppInfoResDTO = {
    /**
     * The unique identifier for the app
     */
    appId: string;
    /**
     * The key of the app
     */
    key: string;
    /**
     * The name of the app
     */
    name: string;
    /**
     * The description of the app
     */
    description: string;
    /**
     * The logo of the app
     */
    logo?: string;
    /**
     * The categories of the app
     */
    categories?: Array<(string)>;
    /**
     * The path of the app
     */
    path?: string;
    /**
     * The documentation URL of the app
     */
    docs?: string;
    /**
     * The configuration documentation text of the app
     */
    configuration_docs_text?: string;
    /**
     * The status of the app
     */
    status?: string;
    /**
     * The documentation text of the app
     */
    documentation_doc_text?: string;
    /**
     * The test connectors of the app
     */
    testConnectors?: Array<unknown>;
    /**
     * Indicates if the app has no authentication
     */
    no_auth?: boolean;
    /**
     * The authentication schemes of the app
     */
    auth_schemes?: Array<unknown>;
    /**
     * The metadata of the app
     */
    meta?: unknown;
    /**
     * The yaml of the app
     */
    yaml?: unknown;
};

export type AddToolsReqDTO = {
    /**
     * The name of the tool
     */
    name: string;
    /**
     * The OpenAPI specification in YAML format
     */
    openApiSpecYaml: string;
    /**
     * The integration details in YAML format
     */
    integrationYaml: string;
};

export type OpenAPISpecListResDTO = {
    /**
     * Unique identifier for the OpenAPI spec
     */
    id: string;
    /**
     * Name of the OpenAPI spec
     */
    name: string;
    /**
     * Client identifier
     */
    clientId: string;
    /**
     * OpenAPI specification in YAML format
     */
    openApiSpec: string;
    /**
     * Integration details in YAML format
     */
    integrationYaml: string;
    /**
     * Whether the OpenAPI spec is enabled
     */
    enabled: boolean;
    /**
     * URL to the OpenAPI specification
     */
    openAPISpecURL?: string | null;
    /**
     * URL to the integration YAML
     */
    integrationYAMLURL?: string | null;
    /**
     * Last synchronization date and time
     */
    lastSyncAt: string;
    /**
     * Creation date and time
     */
    createdAt: string;
    /**
     * Last update date and time
     */
    updatedAt: string;
    /**
     * The job status of the app
     */
    jobStatus?: 'running' | 'success' | 'failed';
};

/**
 * The job status of the app
 */
export type jobStatus = 'running' | 'success' | 'failed';

export type AddRepoURLResDTO = {
    /**
     * Repository URL
     */
    repoUrl: string;
};

export type DeleteToolsReqDTO = {
    /**
     * Name of the tool
     */
    name: string;
};

export type DeleteToolsResDTO = {
    /**
     * Message indicating successful deletion of tools
     */
    message: string;
};

export type AddToolsRequestDTO = {
    /**
     * The name of the tool
     */
    name: string;
    /**
     * The OpenAPI specification in YAML format
     */
    open_api_spec_yaml: string;
    /**
     * The integration details in YAML format
     */
    integration_yaml: string;
};

export type AddRepoURLReqDTO = {
    /**
     * Repository URL
     */
    repoUrl: string;
};

export type AppQueryDTO = {
    /**
     * Category of the app
     */
    category?: string;
};

export type AppInfoResponseDto = {
    /**
     * The ID of the app
     */
    appId: string;
    /**
     * The key of the app
     */
    key: string;
    /**
     * The name of the app
     */
    name: string;
    /**
     * The description of the app
     */
    description: string;
    /**
     * The logo of the app
     */
    logo: string;
    /**
     * The categories of the app
     */
    categories: string;
    /**
     * Indicates if the app is enabled
     */
    enabled: boolean;
    /**
     * Indicates if the app has no authentication
     */
    noAuth?: boolean;
};

export type AppListResDTO = {
    /**
     * List of app details
     */
    items: Array<AppInfoResponseDto>;
    /**
     * Total number of pages
     */
    totalPages: number;
};

export type GetConnectorInfoResDTO = {
    /**
     * Unique identifier of the connector
     */
    id?: string;
    /**
     * Authentication scheme used by the connector
     */
    authScheme?: string;
    /**
     * Name of the connector
     */
    name?: string;
    /**
     * Creation date of the connector
     */
    createdAt?: string;
    /**
     * Last update date of the connector
     */
    updatedAt?: string;
    /**
     * Flag to indicate if the connector is currently enabled
     */
    enabled: boolean;
    /**
     * Flag to indicate if the connector has been deleted
     */
    deleted?: boolean;
    /**
     * Application ID associated with the connector
     */
    appId: string;
    /**
     * Default connector ID if one exists
     */
    defaultConnectorId?: string;
    /**
     * Authentication configuration with sensitive data obscured
     */
    authConfig: {
        [key: string]: unknown;
    };
    /**
     * List of required fields expected from the customer
     */
    expectedInputFields: Array<(string)>;
    /**
     * Logo URL of the application associated with the connector
     */
    logo: string;
    /**
     * Name of the application associated with the connector
     */
    appName: string;
    /**
     * Flag to indicate if Composio authentication is used
     */
    useComposioAuth: boolean;
};

export type AuthConfigDTO = {
    scopes?: Array<(string)>;
    user_scopes?: Array<(string)>;
};

export type CreateConnectorPayloadDTO = {
    /**
     * Name of the connector
     */
    name: string;
    /**
     * Authentication scheme
     */
    authScheme?: string;
    /**
     * Authentication configuration
     */
    authConfig?: AuthConfigDTO;
    /**
     * Flag to indicate if Composio authentication should be used
     */
    useComposioAuth?: boolean;
    /**
     * Application ID
     */
    appId: string;
    /**
     * Flag to force new integration
     */
    forceNewIntegration?: boolean;
};

export type PatchConnectorReqDTO = {
    /**
     * Authentication configuration for the connector
     */
    authConfig?: {
        [key: string]: unknown;
    };
    /**
     * Flag to indicate if the connector is enabled
     */
    enabled?: boolean;
};

export type PatchConnectorResDTO = {
    /**
     * Status of the patch operation
     */
    status: string;
};

export type ConnectorListItemDTO = {
    /**
     * Application name associated with the connector
     */
    appName: string;
    /**
     * Count of connections for the connector
     */
    _count: {
        [key: string]: unknown;
    };
    /**
     * List of connections with their details and request logs count
     */
    connections: Array<unknown>;
    /**
     * Unique identifier of the connector
     */
    id: string;
    /**
     * Name of the connector
     */
    name: string;
    /**
     * Authentication scheme used by the connector
     */
    authScheme: string;
    /**
     * Creation date of the connector
     */
    createdAt: string;
    /**
     * Last update date of the connector
     */
    updatedAt: string;
    /**
     * Flag to indicate if the connector is enabled
     */
    enabled: boolean;
    /**
     * Flag to indicate if the connector is deleted
     */
    deleted?: boolean;
    /**
     * App ID associated with the connector
     */
    appId: string;
    /**
     * Default connector ID if available
     */
    defaultConnectorId?: string;
};

export type GetConnectorListResDTO = {
    /**
     * List of connectors
     */
    items: Array<unknown>;
    /**
     * Total number of pages available
     */
    totalPages: number;
    /**
     * Current page number
     */
    page: number;
};

export type PageInfo = {
    total: number;
    page: number;
    pageSize: number;
    totalPages: number;
};

export type ConnectionWithAppData = {
    id: string;
    integrationId: string;
    clientUniqueUserId?: string;
    status: string;
    data?: {
        [key: string]: unknown;
    };
    deleted?: boolean;
    enabled?: boolean;
    createdAt: string;
    updatedAt: string;
    appUniqueId: string;
    appName: string;
    logo?: string;
    authConfig?: {
        [key: string]: unknown;
    };
};

export type GetConnectionsResult = {
    connections: Array<ConnectionWithAppData>;
    pageInfo: PageInfo;
};

export type ActionExecutionServiceResDTO = {
    response_data: boolean;
    execution_details: {
        [key: string]: unknown;
    };
};

export type ToolsExecuteReqDto = {
    actionName: string;
    runInSandbox: boolean;
    input: {
        [key: string]: unknown;
    };
    nlaInput?: string;
    authorizationData?: {
        [key: string]: unknown;
    };
    appSchema?: {
        [key: string]: unknown;
    };
};

export type DirectExecuteReqDto = {
    endpoint: string;
    base_url: string;
    headers: {
        [key: string]: unknown;
    };
    queryParams: {
        [key: string]: unknown;
    };
};

export type ActionExecutionResDto = {
    response_data: {
        [key: string]: unknown;
    };
    status: 'success' | 'error';
    upstreamStatusCode: number;
};

export type status = 'success' | 'error';

export type ActionExecutionReqDTO = {
    connectedAccountId?: string;
    appName?: string;
    entityId?: string;
    endpoint?: string;
    input?: {
        [key: string]: unknown;
    };
    text?: string;
};

export type ActionExecutionResDTO = {
    connectedAccountId?: string;
    appName?: string;
    entityId?: string;
    endpoint?: string;
    input?: {
        [key: string]: unknown;
    };
    text?: string;
};

export type ActionDetails = {
    appId?: string;
    appKey: string;
    appName: string;
    description: string;
    displayName: string;
    enabled: boolean;
    logo: string;
    name: string;
    parameters: {
        [key: string]: unknown;
    };
    response: {
        [key: string]: unknown;
    };
    tags: Array<(string)>;
};

export type ActionsListResponseDTO = {
    items: Array<ActionDetails>;
    page: number;
    totalPages: number;
};

export type ExecuteActionResDTO = {
    response_data: {
        [key: string]: unknown;
    };
    status: 'success' | 'error';
    upstreamStatusCode: number;
};

export type ActionsQueryDTO = {
    /**
     * Names of the apps
     */
    appNames?: string;
    /**
     * Use case
     */
    useCase?: string;
    /**
     * Show enabled only
     */
    showEnabledOnly?: boolean;
    /**
     * Limit
     */
    limit?: number;
    apps?: string;
    actions?: string;
    tags?: string;
    usecaseLimit?: number;
    filterImportantActions?: boolean;
    showAll?: boolean;
};

export type ActionsControllerV1 = {
    getAction: Array<unknown>;
};

export type ConnectionParams = {
    integrationId: string;
    connectionParams?: {
        [key: string]: unknown;
    };
    isDisabled: boolean;
    invocationCount: number;
    id: string;
    clientUniqueUserId?: string;
    status: string;
    data?: {
        [key: string]: unknown;
    };
    deleted?: boolean;
    enabled?: boolean;
    createdAt: string;
    updatedAt: string;
    appUniqueId: string;
    appName: string;
    logo?: string;
    authConfig?: {
        [key: string]: unknown;
    };
};

export type GetConnectionsResponseDto = {
    items: Array<ConnectionParams>;
    totalPages: number;
    page: number;
};

export type GetConnectionsQueryDto = {
    page?: number;
    pageSize?: number;
    appNames?: unknown;
    integrationId?: string;
    connectionId?: string;
    user_uuid?: string;
    showActiveOnly?: boolean;
    status?: string;
    showDisabled?: boolean;
};

export type InitiateConnectionPayloadDto = {
    data?: string;
    integrationId: string;
    redirectUri?: string;
    userUuid?: string;
};

export type InitiateConnectionResponse = {
    connectionStatus: string;
    connectedAccountId: string;
};

export type OAuth2CallbackQueryDto = {
    state: string;
};

export type RedirectUriDTO = {
    redirectUri: string;
};

export type ListTriggersQueryDTO = {
    /**
     * Names of the apps
     */
    appNames?: string;
    /**
     * IDs of the connected accounts
     */
    connectedAccountIds?: string;
    /**
     * IDs of the triggers
     */
    triggerIds?: string;
    /**
     * Show enabled only
     */
    showEnabledOnly?: boolean;
};

export type GetActiveTriggersQueryDTO = {
    /**
     * IDs of the connected accounts
     */
    connectedAccountIds?: string;
    /**
     * IDs of the integrations
     */
    integrationIds?: string;
    /**
     * IDs of the triggers
     */
    triggerIds?: string;
    /**
     * Names of the triggers
     */
    triggerNames?: string;
    /**
     * Page number
     */
    page?: number;
    /**
     * Limit per page
     */
    limit?: number;
    /**
     * Show disabled triggers
     */
    showDisabled?: boolean;
};

export type GetLogsQueryDTO = {
    /**
     * ID of the connection
     */
    connectionId?: string;
    /**
     * ID of the integration
     */
    integrationId?: string;
    /**
     * Page number
     */
    page?: number;
    /**
     * Limit per page
     */
    limit?: number;
};

export type TriggerResDTO = {
    /**
     * Trigger name
     */
    name: string;
    /**
     * Trigger display name
     */
    display_name: string;
    /**
     * Trigger description
     */
    description?: string;
    /**
     * Is trigger enabled
     */
    enabled?: boolean;
    /**
     * Trigger configuration
     */
    config?: {
        [key: string]: unknown;
    };
    /**
     * Trigger payload
     */
    payload?: {
        [key: string]: unknown;
    };
    /**
     * Trigger logo URL
     */
    logo?: string;
    /**
     * Trigger count
     */
    count?: number;
    /**
     * App key
     */
    appKey: string;
    /**
     * App ID
     */
    appId: string;
    /**
     * App name
     */
    appName: string;
    /**
     * Trigger instructions
     */
    instructions?: string;
    /**
     * Trigger type
     */
    type?: string;
};

export type TriggerConfig = {
    /**
     * Repository name
     */
    repo: string;
    /**
     * Repository owner
     */
    owner: string;
};

export type ActiveTriggerInstance = {
    /**
     * Trigger instance ID
     */
    id?: string;
    /**
     * Connected account ID
     */
    connectionId: string;
    /**
     * Trigger name
     */
    triggerName: string;
    /**
     * Trigger data
     */
    triggerData?: string;
    /**
     * Trigger configuration
     */
    triggerConfig: TriggerConfig;
    /**
     * Created at timestamp
     */
    createdAt: string;
    /**
     * Updated at timestamp
     */
    updatedAt: string;
    /**
     * Disabled at timestamp
     */
    disabledAt?: string | null;
};

export type PageInfoDTO = {
    currentPage: number;
    perPage: number;
    totalPages: number;
};

export type ActiveTriggersResDTO = {
    triggers: Array<unknown>;
    pageInfo: Array<PageInfoDTO>;
};

export type TriggerLogsResDTO = {
    data: Array<TriggerLogItemDTO>;
    pageInfo: PageInfoDTO;
};

export type TriggerLogItemDTO = {
    /**
     * Client ID
     */
    clientId: string;
    /**
     * Connection ID
     */
    connectionId: string;
    /**
     * Error trigger
     */
    errorTrigger?: string | null;
    /**
     * Trigger client error
     */
    triggerClientError?: string | null;
    /**
     * Trigger client payload
     */
    triggerClientPayload?: string | null;
    /**
     * Trigger provider payload
     */
    triggerProviderPayload?: string | null;
    /**
     * Trigger name
     */
    triggerName?: string | null;
    /**
     * Log ID
     */
    id: string;
    /**
     * App key
     */
    appKey: string;
    /**
     * Created at timestamp
     */
    createdAt: string;
};

export type GenerateCLISessionReqDTO = {
    /**
     * The channel name for the CLI session
     */
    channel_name: string;
};

export type LoginAccountAsAdminReqDTO = {
    /**
     * Email of the client
     */
    email?: string;
    /**
     * API Key of the client
     */
    apiKey?: string;
    /**
     * Admin token
     */
    adminToken: string;
};

export type GenerateCLISessionResDTO = {
    /**
     * The key for the CLI session
     */
    key: string;
};

export type GetCLISessionResDTO = {
    /**
     * The client ID
     */
    clientId: string;
    /**
     * The CLI code
     */
    cliCode: string;
};

export type VerifyCLICodeResDTO = {
    /**
     * The client ID
     */
    clientId: string;
    /**
     * The CLI code
     */
    cliCode: string;
    /**
     * The API key associated with the client
     */
    apiKey: string;
};

export type CLIQueryDTO = {
    /**
     * Unique key for CLI session
     */
    key: string;
    /**
     * Code for CLI verification
     */
    code?: string;
};

export type MetadataReqDTO = {
    /**
     * The email associated with the metadata request
     */
    email: string;
    /**
     * Additional metadata as a key-value pair
     */
    metadata?: unknown;
};

export type TriggersEnabledToggleReqDTO = {
    /**
     * Flag to enable or disable triggers
     */
    enabled: boolean;
};

export type TriggersEnabledToggleResDTO = {
    /**
     * Message indicating the result of the toggle operation
     */
    message: string;
};

export type MetadataQueryDTO = {
    /**
     * Email of the client
     */
    email: string;
};

export type TriggerMetadata = {
    /**
     * The unique id of the log
     */
    id: string;
    /**
     * The type of the log
     */
    type: 'trigger';
    /**
     * The date and time when the log was created
     */
    createdAt: string;
    /**
     * The date and time when the log was updated
     */
    updatedAt: string;
    /**
     * The provider of the log
     */
    provider: string;
    /**
     * The client uuid of the log
     */
    clientId: string;
    /**
     * The connection id of the log
     */
    connectionId: string;
    /**
     * The trigger provider payload of the log
     */
    triggerProviderPayload?: string;
    triggerClientPayload?: string;
    /**
     * The trigger client error of the log
     */
    triggerClientError?: string;
    /**
     * The trigger name of the log
     */
    triggerName?: string;
    /**
     * The trigger client response of the log
     */
    triggerClientResponse?: string;
};

export type ActionMetadata = {
    /**
     * The unique id of the log
     */
    id: string;
    /**
     * The request sent to the provider
     */
    request: string;
    /**
     * The response from the provider
     */
    response?: string;
    /**
     * The error request sent to the provider
     */
    errorRequest?: string;
    /**
     * The type of the log
     */
    type: 'action';
    /**
     * The date and time when the log was created
     */
    createdAt: string;
    /**
     * The date and time when the log was updated
     */
    updatedAt: string;
    /**
     * The provider of the log
     */
    provider: string;
    /**
     * The client uuid of the log
     */
    clientId: string;
    /**
     * The connection id of the log
     */
    connectionId: string;
    /**
     * The action name of the log
     */
    actionName: string;
};

export type TriggerLogData = {
    /**
     * The unique identifier of the trigger log
     */
    id: string;
    /**
     * The connection identifier associated with the trigger log
     */
    connectionId: string;
    /**
     * The client identifier associated with the trigger log
     */
    clientId: string;
    /**
     * The status of the trigger log
     */
    status: string;
    /**
     * The name of the application associated with the trigger log
     */
    appName: string;
    /**
     * The creation date and time of the trigger log
     */
    createdAt: string;
    /**
     * The type of the log
     */
    type: 'trigger';
    /**
     * Metadata associated with the trigger log
     */
    meta: TriggerMetadata;
};

export type ActionLogData = {
    /**
     * The unique identifier of the action log
     */
    id: string;
    /**
     * The connection identifier associated with the action log
     */
    connectionId: string;
    /**
     * The client identifier associated with the action log
     */
    clientId: string;
    /**
     * The status of the action log
     */
    status: string;
    /**
     * The name of the application associated with the action log
     */
    appName: string;
    /**
     * The creation date and time of the action log
     */
    createdAt: string;
    /**
     * The type of the log
     */
    type: 'action';
    /**
     * Metadata associated with the action log
     */
    meta: ActionMetadata;
};

export type LogsResDTO = {
    /**
     * The cursor to get the next page of logs
     */
    nextCursor?: string;
    /**
     * Logs data
     */
    data: Array<unknown>;
};

export type GetLogsDTO = {
    /**
     * Type of the log
     */
    type?: 'error' | 'info' | 'debug';
    /**
     * Time interval for which data needs to be fetched
     */
    time?: '30m' | '6h' | '1d' | '1w' | '1month' | '1y';
    /**
     * Status of the log
     */
    status?: 'pending' | 'processed' | 'failed';
    /**
     * Search term in the log
     */
    search?: string;
    /**
     * Integration UUID
     */
    integrationId?: string;
    /**
     * Limit of the logs
     */
    limit?: number;
    /**
     * Cursor for pagination
     */
    cursor?: string;
    /**
     * Connection ID of the log
     */
    connectionId?: string;
};

/**
 * Type of the log
 */
export type type = 'error' | 'info' | 'debug';

/**
 * Time interval for which data needs to be fetched
 */
export type time = '30m' | '6h' | '1d' | '1w' | '1month' | '1y';

/**
 * Status of the log
 */
export type status2 = 'pending' | 'processed' | 'failed';

export type ClientAuthControllerIdentifyClientData = {
    /**
     * IdentifyClientReqDTO
     */
    body?: IdentifyClientReqDTO;
};

export type ClientAuthControllerIdentifyClientResponse = IdentifyClientResDTO;

export type ClientAuthControllerIdentifyClientError = unknown;

export type ClientAuthControllerTrackClientData = {
    /**
     * TrackClientReqDTO
     */
    body?: TrackClientReqDTO;
};

export type ClientAuthControllerTrackClientResponse = TrackClientResDTO;

export type ClientAuthControllerTrackClientError = unknown;

export type ClientAuthControllerSendMagicLinkData = {
    /**
     * MagicLinkReqDTO
     */
    body?: MagicLinkReqDTO;
};

export type ClientAuthControllerSendMagicLinkResponse = MagicLinkResDTO;

export type ClientAuthControllerSendMagicLinkError = unknown;

export type ClientAuthControllerLogoutResponse = LogoutResDTO;

export type ClientAuthControllerLogoutError = unknown;

export type ClientAuthControllerVerifyMagicLinkData = {
    /**
     * VerifyMagicLinkReqDTO
     */
    body?: VerifyMagicLinkReqDTO;
};

export type ClientAuthControllerVerifyMagicLinkResponse = VerifyMagicLinkResDTO;

export type ClientAuthControllerVerifyMagicLinkError = unknown;

export type ClientAuthControllerGetUserInfoResponse = unknown;

export type ClientAuthControllerGetUserInfoError = unknown;

export type ClientAuthControllerPusherUserAuthData = {
    body?: unknown;
};

export type ClientAuthControllerPusherUserAuthResponse = unknown;

export type ClientAuthControllerPusherUserAuthError = unknown;

export type ClientAuthControllerDeleteClientData = {
    path: {
        clientId: string;
    };
};

export type ClientAuthControllerDeleteClientResponse = unknown;

export type ClientAuthControllerDeleteClientError = unknown;

export type TeamControllerInviteMemberData = {
    /**
     * InviteMemberReqDTO
     */
    body?: InviteMemberReqDTO;
};

export type TeamControllerInviteMemberResponse = MemberResDTO;

export type TeamControllerInviteMemberError = unknown;

export type TeamControllerListMembersResponse = Array<MemberResDTO>;

export type TeamControllerListMembersError = unknown;

export type TeamControllerRemoveMemberData = {
    path: {
        id: string;
    };
};

export type TeamControllerRemoveMemberResponse = unknown;

export type TeamControllerRemoveMemberError = unknown;

export type ApiKeysControllerGenerateApiKeyData = {
    /**
     * GenerateAPIKeyReqDTO
     */
    body: GenerateAPIKeyReqDTO;
};

export type ApiKeysControllerGenerateApiKeyResponse = APIKeyResDTO;

export type ApiKeysControllerGenerateApiKeyError = unknown;

export type ApiKeysControllerListApiKeysResponse = Array<APIKeyResDTO>;

export type ApiKeysControllerListApiKeysError = unknown;

export type ApiKeysControllerDeleteApiKeyData = {
    path: {
        id: string;
    };
};

export type ApiKeysControllerDeleteApiKeyResponse = void;

export type ApiKeysControllerDeleteApiKeyError = unknown;

export type AppControllerGetAppsData = {
    query?: {
        category?: string;
    };
};

export type AppControllerGetAppsResponse = AppListResDTO;

export type AppControllerGetAppsError = unknown;

export type AppControllerAddOpenApiSpecData = {
    /**
     * AddToolsRequestDTO
     */
    body?: AddToolsRequestDTO;
};

export type AppControllerAddOpenApiSpecResponse = unknown;

export type AppControllerAddOpenApiSpecError = unknown;

export type AppControllerGetOpenaApiSpecsResponse = Array<AppListResDTO>;

export type AppControllerGetOpenaApiSpecsError = unknown;

export type AppControllerDeleteOpenApiSpecToolData = {
    body?: unknown;
};

export type AppControllerDeleteOpenApiSpecToolResponse = unknown;

export type AppControllerDeleteOpenApiSpecToolError = unknown;

export type AppControllerGetOpenApiSpecLogsData = {
    path: {
        name: string;
    };
};

export type AppControllerGetOpenApiSpecLogsResponse = unknown;

export type AppControllerGetOpenApiSpecLogsError = unknown;

export type AppControllerAddCustomRepoData = {
    /**
     * AddRepoURLReqDTO
     */
    body?: AddRepoURLReqDTO;
};

export type AppControllerAddCustomRepoResponse = unknown;

export type AppControllerAddCustomRepoError = unknown;

export type AppControllerGetAppData = {
    path: {
        appName: string;
    };
};

export type AppControllerGetAppResponse = SingleAppInfoResDTO;

export type AppControllerGetAppError = unknown;

export type AppControllerSyncAppsResponse = unknown;

export type AppControllerSyncAppsError = unknown;

export type AppControllerGetCustomRepoResponse = unknown;

export type AppControllerGetCustomRepoError = unknown;

export type AppConnectorControllerCreateConnectorData = {
    /**
     * CreateConnectorPayloadDTO
     */
    body?: CreateConnectorPayloadDTO;
};

export type AppConnectorControllerCreateConnectorResponse = GetConnectorInfoResDTO;

export type AppConnectorControllerCreateConnectorError = unknown;

export type AppConnectorControllerListGlobalConnectorsResponse = GetConnectorListResDTO;

export type AppConnectorControllerListGlobalConnectorsError = unknown;

export type AppConnectorControllerGetConnectorInfoData = {
    path: {
        integrationId: string;
    };
};

export type AppConnectorControllerGetConnectorInfoResponse = GetConnectorInfoResDTO;

export type AppConnectorControllerGetConnectorInfoError = unknown;

export type AppConnectorControllerPatchConnectorData = {
    /**
     * PatchConnectorReqDTO
     */
    body?: PatchConnectorReqDTO;
    path: {
        integrationId: string;
    };
};

export type AppConnectorControllerPatchConnectorResponse = PatchConnectorResDTO;

export type AppConnectorControllerPatchConnectorError = unknown;

export type AppConnectorControllerDeleteConnectorData = {
    path: {
        integrationId: string;
    };
};

export type AppConnectorControllerDeleteConnectorResponse = DeleteRowAPIDTO;

export type AppConnectorControllerDeleteConnectorError = unknown;

export type AppConnectorControllerPatchPostConnectorData = {
    /**
     * PatchConnectorReqDTO
     */
    body?: PatchConnectorReqDTO;
    path: {
        integrationId: string;
    };
};

export type AppConnectorControllerPatchPostConnectorResponse = PatchConnectorResDTO;

export type AppConnectorControllerPatchPostConnectorError = unknown;

export type ActionsControllerV1ListActionsData = {
    query?: {
        actions?: string;
        appNames?: string;
        apps?: string;
        filterImportantActions?: boolean;
        limit?: number;
        showAll?: boolean;
        showEnabledOnly?: boolean;
        tags?: string;
        useCase?: string;
        usecaseLimit?: number;
    };
};

export type ActionsControllerV1ListActionsResponse = ActionsListResponseDTO;

export type ActionsControllerV1ListActionsError = unknown;

export type ActionsControllerV1ExecuteActionData = {
    /**
     * ActionExecutionReqDTO
     */
    body?: ActionExecutionReqDTO;
    path: {
        actionId: string;
    };
};

export type ActionsControllerV1ExecuteActionResponse = ExecuteActionResDTO;

export type ActionsControllerV1ExecuteActionError = unknown;

export type ActionsControllerV1ExecuteActionProxyData = {
    /**
     * ActionExecutionReqDTO
     */
    body?: ActionExecutionReqDTO;
};

export type ActionsControllerV1ExecuteActionProxyResponse = ExecuteActionResDTO;

export type ActionsControllerV1ExecuteActionProxyError = unknown;

export type ActionsControllerV1GetActionData = {
    path: {
        actionId: string;
    };
};

export type ActionsControllerV1GetActionResponse = ActionDetails;

export type ActionsControllerV1GetActionError = unknown;

export type ConnectionsControllerGetConnectionsData = {
    query?: {
        appNames?: unknown;
        connectionId?: string;
        integrationId?: string;
        page?: number;
        pageSize?: number;
        showActiveOnly?: boolean;
        showDisabled?: boolean;
        status?: string;
        user_uuid?: string;
    };
};

export type ConnectionsControllerGetConnectionsResponse = GetConnectionsResponseDto;

export type ConnectionsControllerGetConnectionsError = unknown;

export type ConnectionsControllerInitiateConnectionData = {
    /**
     * InitiateConnectionPayloadDto
     */
    body?: InitiateConnectionPayloadDto;
};

export type ConnectionsControllerInitiateConnectionResponse = InitiateConnectionResponse;

export type ConnectionsControllerInitiateConnectionError = unknown;

export type ConnectionsControllerGetConnectionData = {
    path: {
        connectedAccountId: string;
    };
};

export type ConnectionsControllerGetConnectionResponse = unknown;

export type ConnectionsControllerGetConnectionError = unknown;

export type ConnectionsControllerDeleteConnectionData = {
    path: {
        connectedAccountId: string;
    };
};

export type ConnectionsControllerDeleteConnectionResponse = unknown;

export type ConnectionsControllerDeleteConnectionError = unknown;

export type ConnectionsControllerDisableConnectionData = {
    path: {
        connectedAccountId: string;
    };
};

export type ConnectionsControllerDisableConnectionResponse = unknown;

export type ConnectionsControllerDisableConnectionError = unknown;

export type ConnectionsControllerEnableConnectionData = {
    path: {
        connectedAccountId: string;
    };
};

export type ConnectionsControllerEnableConnectionResponse = unknown;

export type ConnectionsControllerEnableConnectionError = unknown;

export type AppLoginControllerHandleOauth2CallbackData = {
    path: {
        appName: string;
    };
    query: {
        redirectUri: string;
    };
};

export type AppLoginControllerHandleOauth2CallbackResponse = unknown;

export type AppLoginControllerHandleOauth2CallbackError = unknown;

export type AppLoginControllerVerifyOauth2LoginData = {
    path: {
        appName: string;
    };
};

export type AppLoginControllerVerifyOauth2LoginResponse = unknown;

export type AppLoginControllerVerifyOauth2LoginError = unknown;

export type TriggersControllerListTriggersData = {
    query?: {
        appNames?: string;
        connectedAccountIds?: string;
        showEnabledOnly?: boolean;
        triggerIds?: string;
    };
};

export type TriggersControllerListTriggersResponse = Array<TriggerResDTO>;

export type TriggersControllerListTriggersError = unknown;

export type TriggersControllerHandleTriggerData = {
    body?: unknown;
    headers?: {
        ''?: unknown;
    };
    path: {
        appName: string;
        clientId: string;
    };
};

export type TriggersControllerHandleTriggerResponse = unknown;

export type TriggersControllerHandleTriggerError = unknown;

export type TriggersControllerEnableTriggerData = {
    body?: unknown;
    path: {
        connectedAccountId: string;
        triggerName: string;
    };
};

export type TriggersControllerEnableTriggerResponse = unknown;

export type TriggersControllerEnableTriggerError = unknown;

export type TriggersControllerGetTriggerData = {
    path: {
        triggerId: string;
    };
};

export type TriggersControllerGetTriggerResponse = unknown;

export type TriggersControllerGetTriggerError = unknown;

export type TriggersControllerGetActiveTriggersData = {
    query?: {
        connectedAccountIds?: string;
        integrationIds?: string;
        limit?: number;
        page?: number;
        showDisabled?: boolean;
        triggerIds?: string;
        triggerNames?: string;
    };
};

export type TriggersControllerGetActiveTriggersResponse = unknown;

export type TriggersControllerGetActiveTriggersError = unknown;

export type TriggersControllerSwitchTriggerInstanceStatusData = {
    body?: unknown;
    path: {
        triggerId: string;
    };
};

export type TriggersControllerSwitchTriggerInstanceStatusResponse = unknown;

export type TriggersControllerSwitchTriggerInstanceStatusError = unknown;

export type TriggersControllerSwitchPostTriggerInstanceStatusData = {
    body?: unknown;
    path: {
        triggerId: string;
    };
};

export type TriggersControllerSwitchPostTriggerInstanceStatusResponse = unknown;

export type TriggersControllerSwitchPostTriggerInstanceStatusError = unknown;

export type TriggersControllerDisableTriggerData = {
    path: {
        triggerId: string;
    };
};

export type TriggersControllerDisableTriggerResponse = unknown;

export type TriggersControllerDisableTriggerError = unknown;

export type TriggersControllerDeleteTriggerData = {
    path: {
        triggerInstanceId: string;
    };
};

export type TriggersControllerDeleteTriggerResponse = unknown;

export type TriggersControllerDeleteTriggerError = unknown;

export type TriggersControllerSetCallbackUrlData = {
    body?: unknown;
};

export type TriggersControllerSetCallbackUrlResponse = unknown;

export type TriggersControllerSetCallbackUrlError = unknown;

export type TriggersControllerSetCallbackUrl1Data = {
    body?: unknown;
};

export type TriggersControllerSetCallbackUrl1Response = unknown;

export type TriggersControllerSetCallbackUrl1Error = unknown;

export type TriggersControllerGetWebhookUrlResponse = unknown;

export type TriggersControllerGetWebhookUrlError = unknown;

export type TriggersControllerGetLogsData = {
    query?: {
        connectionId?: string;
        integrationId?: string;
        limit?: number;
        page?: number;
    };
};

export type TriggersControllerGetLogsResponse = TriggerLogsResDTO;

export type TriggersControllerGetLogsError = unknown;

export type TriggersControllerHandlePusherEventsData = {
    body?: unknown;
};

export type TriggersControllerHandlePusherEventsResponse = unknown;

export type TriggersControllerHandlePusherEventsError = unknown;

export type AdminControllerSentryDnsResponse = unknown;

export type AdminControllerSentryDnsError = unknown;

export type CliControllerHandleCliCodeExchangeResponse = GenerateCLISessionResDTO;

export type CliControllerHandleCliCodeExchangeError = unknown;

export type CliControllerGetCliCodeData = {
    query: {
        code?: string;
        key: string;
    };
};

export type CliControllerGetCliCodeResponse = GetCLISessionResDTO;

export type CliControllerGetCliCodeError = unknown;

export type CliControllerHandleCliCodeVerificationData = {
    query: {
        code?: string;
        key: string;
    };
};

export type CliControllerHandleCliCodeVerificationResponse = VerifyCLICodeResDTO;

export type CliControllerHandleCliCodeVerificationError = unknown;

export type MetadataControllerGetMetadataData = {
    query: {
        email: string;
    };
};

export type MetadataControllerGetMetadataResponse = unknown;

export type MetadataControllerGetMetadataError = unknown;

export type MetadataControllerUpdateMetadataData = {
    /**
     * MetadataReqDTO
     */
    body: MetadataReqDTO;
};

export type MetadataControllerUpdateMetadataResponse = unknown;

export type MetadataControllerUpdateMetadataError = unknown;

export type MetadataControllerToggleTriggerStateData = {
    /**
     * TriggersEnabledToggleReqDTO
     */
    body?: TriggersEnabledToggleReqDTO;
};

export type MetadataControllerToggleTriggerStateResponse = unknown;

export type MetadataControllerToggleTriggerStateError = unknown;

export type MetadataControllerGetToggleInfoResponse = unknown;

export type MetadataControllerGetToggleInfoError = unknown;

export type LogsControllerGetLogsData = {
    query?: {
        connectionId?: string;
        cursor?: string;
        integrationId?: string;
        limit?: number;
        search?: string;
        status?: 'pending' | 'processed' | 'failed';
        time?: '30m' | '6h' | '1d' | '1w' | '1month' | '1y';
        type?: 'error' | 'info' | 'debug';
    };
};

export type LogsControllerGetLogsResponse = LogsResDTO;

export type LogsControllerGetLogsError = unknown;

export type ActionsControllerV2ListActionsData = {
    query?: {
        actions?: string;
        appNames?: string;
        apps?: string;
        filterImportantActions?: boolean;
        limit?: number;
        showAll?: boolean;
        showEnabledOnly?: boolean;
        tags?: string;
        useCase?: string;
        usecaseLimit?: number;
    };
};

export type ActionsControllerV2ListActionsResponse = ActionsListResponseDTO;

export type ActionsControllerV2ListActionsError = unknown;

export type ActionsControllerV2ExecuteActionData = {
    /**
     * ActionExecutionReqDTO
     */
    body?: ActionExecutionReqDTO;
    path: {
        actionId: string;
    };
};

export type ActionsControllerV2ExecuteActionResponse = ExecuteActionResDTO;

export type ActionsControllerV2ExecuteActionError = unknown;

export type ActionsControllerV2ExecuteActionProxyData = {
    /**
     * ActionExecutionReqDTO
     */
    body?: ActionExecutionReqDTO;
};

export type ActionsControllerV2ExecuteActionProxyResponse = ExecuteActionResDTO;

export type ActionsControllerV2ExecuteActionProxyError = unknown;